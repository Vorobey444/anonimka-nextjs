// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ fallback –º–µ—Ç–æ–¥–∞–º–∏
let tg = window.Telegram?.WebApp || {
    expand: () => {},
    setHeaderColor: () => {},
    setBackgroundColor: () => {},
    MainButton: {
        setText: () => {},
        onClick: () => {},
        show: () => {},
        hide: () => {}
    },
    BackButton: {
        onClick: () => {},
        show: () => {},
        hide: () => {}
    },
    initDataUnsafe: {
        user: null
    },
    ready: () => {},
    close: () => {}
};

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è showAlert —Å fallback –Ω–∞ alert()
// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
const originalShowAlert = tg.showAlert ? tg.showAlert.bind(tg) : null;
const originalShowPopup = tg.showPopup ? tg.showPopup.bind(tg) : null;

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è showPopup —Å fallback –Ω–∞ showAlert
tg.showPopup = function(params, callback) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞
    const version = parseFloat(tg.version || '6.0');
    if (version >= 6.2 && originalShowPopup) {
        try {
            originalShowPopup(params, callback);
            return;
        } catch (e) {
            console.warn('showPopup failed:', e.message);
        }
    }
    
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π showAlert –Ω–∞–ø—Ä—è–º—É—é
    const message = params.message || params.title || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
    if (originalShowAlert) {
        try {
            originalShowAlert(message, callback);
        } catch (e) {
            alert(message);
            if (callback) setTimeout(callback, 0);
        }
    } else {
        alert(message);
        if (callback) setTimeout(callback, 0);
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
const isTelegramWebApp = !!window.Telegram?.WebApp?.initData;
console.log('–ó–∞–ø—É—â–µ–Ω–æ –≤ Telegram WebApp:', isTelegramWebApp);

if (isTelegramWebApp) {
    tg.expand();
}

// –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
let formData = {};
let currentStep = 1;
const totalSteps = 7;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeTelegramWebApp();
    checkTelegramAuth(); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    checkUserLocation();
    setupEventListeners();
    setupContactsEventListeners();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR
    document.addEventListener('visibilitychange', function() {
        if (!document.hidden) {
            console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑
            setTimeout(() => {
                checkTelegramAuth();
            }, 500);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    window.addEventListener('message', function(event) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (event.origin !== window.location.origin) {
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Login Widget
        if (event.data && event.data.type === 'telegram_auth' && event.data.user) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞:', event.data.user);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            localStorage.setItem('telegram_user', JSON.stringify(event.data.user));
            localStorage.setItem('telegram_auth_time', Date.now().toString());
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = document.getElementById('telegramAuthModal');
            if (modal) {
                modal.style.display = 'none';
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            alert(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${event.data.user.first_name}!`);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            location.reload();
        }
    });
});

function initializeTelegramWebApp() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
    tg.setHeaderColor('#0a0a0f');
    tg.setBackgroundColor('#0a0a0f');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    tg.MainButton.setText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    tg.MainButton.onClick(() => showMainMenu());
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    tg.BackButton.onClick(() => handleBackButton());
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –≤ Telegram
    if (!isTelegramWebApp) {
        console.warn('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram WebApp. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            const warning = document.createElement('div');
            warning.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: rgba(255, 153, 0, 0.95);
                color: #000;
                padding: 15px 25px;
                border-radius: 10px;
                z-index: 10000;
                font-weight: bold;
                box-shadow: 0 4px 15px rgba(255, 153, 0, 0.3);
                max-width: 90%;
                text-align: center;
            `;
            warning.innerHTML = '‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞<br><small>–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞</small>';
            document.body.appendChild(warning);
            
            // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 7 —Å–µ–∫—É–Ω–¥
            setTimeout(() => warning.remove(), 7000);
        }, 2000);
    }
    
    console.log('Telegram Web App initialized');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
function checkTelegramAuth() {
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    console.log('isTelegramWebApp:', isTelegramWebApp);
    console.log('tg.initDataUnsafe:', tg.initDataUnsafe);
    
    // –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram WebApp, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è
    if (isTelegramWebApp && tg.initDataUnsafe?.user?.id) {
        const userData = {
            id: tg.initDataUnsafe.user.id,
            first_name: tg.initDataUnsafe.user.first_name,
            last_name: tg.initDataUnsafe.user.last_name,
            username: tg.initDataUnsafe.user.username,
            photo_url: tg.initDataUnsafe.user.photo_url
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const savedUser = localStorage.getItem('telegram_user');
        const isNewAuth = !savedUser || JSON.stringify(userData) !== savedUser;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('telegram_user', JSON.stringify(userData));
        localStorage.setItem('telegram_auth_time', Date.now().toString());
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram WebApp:', userData);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ
        const modal = document.getElementById('telegramAuthModal');
        if (modal) {
            modal.style.display = 'none';
            console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ');
            
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–≤–µ—Ä–Ω—É–ª–∏—Å—å –∏–∑ –±–æ—Ç–∞), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (isNewAuth) {
                // –î–∞–µ–º –≤—Ä–µ–º—è –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É –∑–∞–∫—Ä—ã—Ç—å—Å—è
                setTimeout(() => {
                    tg.showAlert(`‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userData.first_name}!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.`);
                }, 300);
            }
        }
        
        return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏
    const savedUser = localStorage.getItem('telegram_user');
    if (savedUser) {
        try {
            const userData = JSON.parse(savedUser);
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', userData);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            const authTime = localStorage.getItem('telegram_auth_time');
            const now = Date.now();
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –¥–Ω–µ–π
            if (authTime && (now - parseInt(authTime)) < 30 * 24 * 60 * 60 * 1000) {
                return true;
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
            localStorage.removeItem('telegram_user');
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
    showTelegramAuthModal();
    return false;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function showTelegramAuthModal() {
    console.log('üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    const modal = document.getElementById('telegramAuthModal');
    if (!modal) {
        console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–¥–µ–ª–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º)
    modal.style.display = 'flex';
    modal.style.zIndex = '99999';
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const overlay = modal.querySelector('.modal-overlay');
    if (overlay) {
        overlay.onclick = (e) => {
            e.stopPropagation();
            alert('‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram');
        };
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeBtn = modal.querySelector('.modal-close');
    if (closeBtn) {
        closeBtn.onclick = (e) => {
            e.preventDefault();
            alert('‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram');
            return false;
        };
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π auth token –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    const authToken = 'auth_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    localStorage.setItem('telegram_auth_token', authToken);
    
    console.log('üîë Auth token —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', authToken);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    generateTelegramQR(authToken);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Login Widget –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    initTelegramLoginWidget();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä–∞
    const checkInterval = setInterval(async () => {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ QR –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
            const response = await fetch(`/api/auth?token=${authToken}`);
            const data = await response.json();
            
            if (data.authorized && data.user) {
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ QR –ø–æ–ª—É—á–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', data.user);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                localStorage.setItem('telegram_user', JSON.stringify(data.user));
                localStorage.setItem('telegram_auth_time', Date.now().toString());
                localStorage.removeItem('telegram_auth_token');
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                clearInterval(checkInterval);
                modal.style.display = 'none';
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                tg.showAlert(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.user.first_name}!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∞–π—Ç–æ–º –∫–∞–∫ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —Ç–∞–∫ –∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞.`);
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                setTimeout(() => location.reload(), 1000);
                return;
            }
            
            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage (–Ω–∞ —Å–ª—É—á–∞–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Login Widget)
            const savedUser = localStorage.getItem('telegram_user');
            const authTime = localStorage.getItem('telegram_auth_time');
            
            if (savedUser && authTime) {
                const userData = JSON.parse(savedUser);
                const timeDiff = Date.now() - parseInt(authTime);
                
                // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
                if (timeDiff < 10000) {
                    console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Login Widget:', userData);
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    clearInterval(checkInterval);
                    modal.style.display = 'none';
                    localStorage.removeItem('telegram_auth_token');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    tg.showAlert(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userData.first_name}!`);
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    setTimeout(() => location.reload(), 1000);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        }
    }, 2000);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    setTimeout(() => {
        clearInterval(checkInterval);
        console.log('‚è∞ Timeout: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }, 600000);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function generateTelegramQR(authToken) {
    const qrcodeContainer = document.getElementById('qrcode');
    const qrLoading = document.getElementById('qrLoading');
    
    if (!qrcodeContainer) return;
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    qrcodeContainer.innerHTML = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (qrLoading) {
        qrLoading.classList.remove('hidden');
    }
    
    // –°–æ–∑–¥–∞–µ–º deep link –¥–ª—è Telegram –±–æ—Ç–∞
    // –§–æ—Ä–º–∞—Ç: https://t.me/bot_username?start=auth_token
    const botUsername = 'anonimka_kz_bot'; // @anonimka_kz_bot
    const telegramDeepLink = `https://t.me/${botUsername}?start=${authToken}`;
    
    console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è:', telegramDeepLink);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    setTimeout(() => {
        try {
            new QRCode(qrcodeContainer, {
                text: telegramDeepLink,
                width: 240,
                height: 240,
                colorDark: "#8338ec",
                colorLight: "#ffffff",
                correctLevel: QRCode.CorrectLevel.H
            });
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            if (qrLoading) {
                qrLoading.classList.add('hidden');
            }
            
            console.log('QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
            if (qrLoading) {
                qrLoading.innerHTML = '<p style="color: #ff0066;">‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞</p>';
            }
        }
    }, 100);
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
function closeTelegramAuthModal() {
    const savedUser = localStorage.getItem('telegram_user');
    if (!savedUser) {
        alert('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram');
        return;
    }
    
    const modal = document.getElementById('telegramAuthModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Login Widget
function initTelegramLoginWidget() {
    const container = document.getElementById('telegramLoginWidget');
    if (!container) return;
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    
    // –ò–º—è –±–æ—Ç–∞ –¥–ª—è Telegram Login Widget
    const botUsername = 'anonimka_kz_bot'; // @anonimka_kz_bot
    
    // –°–æ–∑–¥–∞—ë–º iframe –¥–ª—è Telegram Login Widget
    const script = document.createElement('script');
    script.async = true;
    script.src = 'https://telegram.org/js/telegram-widget.js?22';
    script.setAttribute('data-telegram-login', botUsername);
    script.setAttribute('data-size', 'large');
    script.setAttribute('data-auth-url', window.location.origin + '/webapp/auth.html');
    script.setAttribute('data-request-access', 'write');
    
    container.appendChild(script);
    
    console.log('Telegram Login Widget –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–æ—Ç–∞:', botUsername);
}

// Callback –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Login Widget
window.onTelegramAuth = function(user) {
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Login Widget:', user);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    localStorage.setItem('telegram_user', JSON.stringify(user));
    localStorage.setItem('telegram_auth_time', Date.now().toString());
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.getElementById('telegramAuthModal');
    if (modal) {
        modal.style.display = 'none';
        console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    alert(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.first_name}!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.`);
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    location.reload();
};

// –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getCurrentUserId() {
    // –ï—Å–ª–∏ –≤ Telegram WebApp
    if (isTelegramWebApp && tg.initDataUnsafe?.user?.id) {
        return tg.initDataUnsafe.user.id.toString();
    }
    
    // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Login Widget
    const savedUser = localStorage.getItem('telegram_user');
    if (savedUser) {
        try {
            const userData = JSON.parse(savedUser);
            return userData.id?.toString();
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
        }
    }
    
    // Fallback - –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
    return 'web_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    document.querySelectorAll('.city-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            if (this.classList.contains('filter')) {
                handleCityFilter(this.dataset.city);
            } else {
                selectCity(this.dataset.city);
            }
        });
    });

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    document.querySelectorAll('.gender-btn').forEach(btn => {
        btn.addEventListener('click', () => selectGender(btn.dataset.gender));
    });

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –ø–æ–∏—Å–∫–∞
    document.querySelectorAll('.target-btn').forEach(btn => {
        btn.addEventListener('click', () => selectTarget(btn.dataset.target));
    });

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
    document.querySelectorAll('.goal-btn').forEach(btn => {
        btn.addEventListener('click', () => selectGoal(btn.dataset.goal));
    });

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è
    document.querySelectorAll('.body-btn').forEach(btn => {
        btn.addEventListener('click', () => selectBody(btn.dataset.body));
    });

    // –ö–∞—Å—Ç–æ–º–Ω—ã–π –≥–æ—Ä–æ–¥
    document.getElementById('customCity').addEventListener('input', function() {
        if (this.value.trim()) {
            clearCitySelection();
            formData.city = this.value.trim();
        }
    });
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ Telegram
    updateTelegramButtons(screenId);
}

function updateTelegramButtons(screenId) {
    switch(screenId) {
        case 'mainMenu':
            tg.BackButton.hide();
            tg.MainButton.hide();
            break;
        case 'createAd':
            tg.BackButton.show();
            tg.MainButton.hide();
            break;
        case 'browseAds':
            tg.BackButton.show();
            tg.MainButton.hide();
            break;
        case 'adDetails':
            tg.BackButton.show();
            tg.MainButton.hide();
            break;
    }
}

function handleBackButton() {
    const activeScreen = document.querySelector('.screen.active').id;
    
    switch(activeScreen) {
        case 'createAd':
            showMainMenu();
            break;
        case 'browseAds':
            showMainMenu();
            break;
        case 'adDetails':
            showBrowseAds();
            break;
        default:
            showMainMenu();
    }
}

function showMainMenu() {
    showScreen('mainMenu');
    resetForm();
}

function showCreateAd() {
    if (!userLocation) {
        tg.showAlert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥');
        showLocationSetup();
        return;
    }
    
    showScreen('createAd');
    currentStep = 1;
    showStep(1);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    formData.country = userLocation.country;
    formData.region = userLocation.region;
    formData.city = userLocation.city;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–µ
    updateFormLocationDisplay();
}

// –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–µ
function updateFormLocationDisplay() {
    if (userLocation) {
        const locationText = `${locationData[userLocation.country].flag} ${userLocation.region}, ${userLocation.city}`;
        const formLocationDisplay = document.getElementById('formLocationDisplay');
        if (formLocationDisplay) {
            formLocationDisplay.textContent = locationText;
        }
    }
}

function showBrowseAds() {
    showScreen('browseAds');
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
    const browseLocationDisplay = document.getElementById('browseLocationDisplay');
    if (userLocation && browseLocationDisplay) {
        const locationText = `${locationData[userLocation.country].flag} ${userLocation.region}, ${userLocation.city}`;
        browseLocationDisplay.textContent = locationText;
    } else if (browseLocationDisplay) {
        browseLocationDisplay.textContent = '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setTimeout(() => {
        if (userLocation) {
            console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏–∏:', userLocation);
            loadAdsByLocation(userLocation.country, userLocation.region, userLocation.city);
        } else {
            console.log('–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
            loadAds();
        }
    }, 100);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
function showMyAds() {
    showScreen('myAds');
    loadMyAds();
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async function loadMyAds() {
    const myAdsList = document.getElementById('myAdsList');
    if (!myAdsList) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç myAdsList –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    myAdsList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...</div>';
    
    try {
        const userId = getCurrentUserId();
        console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        
        if (userId.startsWith('web_')) {
            myAdsList.innerHTML = `
                <div class="no-ads">
                    <div class="neon-icon">üîê</div>
                    <h3>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
                    <p>–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</p>
                    <button class="neon-button primary" onclick="showTelegramAuthModal()">
                        –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
                    </button>
                </div>
            `;
            return;
        }
        
        const ads = await getAllAds();
        console.log('üìã –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', ads.length);
        
        const myAds = ads.filter(ad => ad.tg_id === userId);
        console.log('üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', myAds.length);
        
        if (myAds.length === 0) {
            myAdsList.innerHTML = `
                <div class="no-ads">
                    <div class="neon-icon">üì≠</div>
                    <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –æ–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å</p>
                    <button class="neon-button primary" onclick="showCreateAd()">
                        ‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    </button>
                </div>
            `;
            return;
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        myAdsList.innerHTML = myAds.map((ad, index) => {
            const isPinned = ad.is_pinned && (!ad.pinned_until || new Date(ad.pinned_until) > new Date());
            
            return `
            <div class="ad-card" data-ad-id="${ad.id}">
                ${isPinned ? '<span class="pinned-badge">üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ</span>' : ''}
                <div class="ad-info">
                    <div class="ad-field">
                        <span class="icon">${ad.gender === 'male' ? 'üë®' : 'üë©'}</span>
                        <span>${ad.my_age || '?'} –ª–µ—Ç, ${ad.body_type || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                    </div>
                    <div class="ad-field">
                        <span class="icon">üéØ</span>
                        <span>${ad.goal || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                    </div>
                    <div class="ad-field">
                        <span class="icon">üìç</span>
                        <span>${locationData[ad.country]?.flag || 'üåç'} ${ad.region}, ${ad.city}</span>
                    </div>
                    <div class="ad-field">
                        <span class="icon">üìù</span>
                        <span>${ad.text ? (ad.text.substring(0, 100) + (ad.text.length > 100 ? '...' : '')) : '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</span>
                    </div>
                    <div class="ad-field">
                        <span class="icon">üìÖ</span>
                        <span>${new Date(ad.created_at).toLocaleDateString('ru-RU')}</span>
                    </div>
                </div>
                <div class="ad-actions">
                    <button class="delete-ad-btn" onclick="deleteMyAd(${ad.id})">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                    <button class="pin-ad-btn" onclick="pinMyAd(${ad.id}, ${!isPinned})">
                        ${isPinned ? '‚úñÔ∏è –û—Ç–∫—Ä–µ–ø–∏—Ç—å' : 'üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å (24—á)'}
                    </button>
                </div>
            </div>
        `;
        }).join('');
        
        console.log('‚úÖ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
        myAdsList.innerHTML = `
            <div class="no-ads">
                <div class="neon-icon">‚ö†Ô∏è</div>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p>${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
                <button class="neon-button primary" onclick="loadMyAds()">
                    üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞–º–∏ —Ñ–æ—Ä–º—ã
function showStep(step) {
    console.log(`üìç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ ${step} –∏–∑ ${totalSteps}`);
    
    document.querySelectorAll('.form-step').forEach(s => s.classList.remove('active'));
    const stepElement = document.getElementById(`step${step}`);
    
    if (!stepElement) {
        console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç step${step} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        return;
    }
    
    stepElement.classList.add('active');
    console.log(`‚úÖ –®–∞–≥ ${step} –∞–∫—Ç–∏–≤–µ–Ω`, stepElement);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä textarea
    const textareaContainer = document.getElementById('textareaContainer');
    if (textareaContainer) {
        if (step === 7) {
            textareaContainer.style.display = 'block';
            console.log('‚úÖ –ü–æ–∫–∞–∑–∞–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä textarea');
            
            // –Ø–î–ï–†–ù–ê–Ø –û–ü–¶–ò–Ø: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π textarea –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å –Ω—É–ª—è
            let textarea = document.getElementById('adText');
            if (textarea) {
                textarea.remove();
                console.log('üóëÔ∏è –£–¥–∞–ª–∏–ª–∏ —Å—Ç–∞—Ä—ã–π textarea');
            }
            
            // –°–æ–∑–¥–∞—ë–º textarea –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            textarea = document.createElement('textarea');
            textarea.id = 'adText';
            textarea.placeholder = '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —á—Ç–æ –∏—â–µ—Ç–µ...';
            textarea.rows = 6;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
            Object.assign(textarea.style, {
                display: 'block',
                visibility: 'visible',
                opacity: '1',
                width: '100%',
                maxWidth: '500px',
                padding: '15px',
                background: 'rgba(26, 26, 46, 0.8)',
                border: '2px solid #ff00ff',
                borderRadius: '15px',
                color: '#e0e0ff',
                fontSize: '16px',
                resize: 'vertical',
                minHeight: '120px',
                height: 'auto',
                fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                boxSizing: 'border-box',
                position: 'relative',
                zIndex: '9999',
                margin: '0 auto'
            });
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            textareaContainer.innerHTML = '';
            textareaContainer.appendChild(textarea);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                const check = document.getElementById('adText');
                console.log('üîç –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò —Å–æ–∑–¥–∞–Ω–Ω—ã–π textarea:', {
                    exists: !!check,
                    display: check?.style.display,
                    visibility: check?.style.visibility,
                    computedDisplay: check ? window.getComputedStyle(check).display : 'n/a',
                    computedVisibility: check ? window.getComputedStyle(check).visibility : 'n/a',
                    offsetHeight: check?.offsetHeight,
                    offsetWidth: check?.offsetWidth,
                    clientHeight: check?.clientHeight,
                    clientWidth: check?.clientWidth
                });
            }, 100);
        } else {
            textareaContainer.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const submitBtn = document.getElementById('submitBtn');
    
    prevBtn.style.display = step > 1 ? 'block' : 'none';
    nextBtn.style.display = step < totalSteps ? 'block' : 'none';
    submitBtn.style.display = step === totalSteps ? 'block' : 'none';
    
    console.log('üîò –ö–Ω–æ–ø–∫–∏:', {
        prev: prevBtn.style.display,
        next: nextBtn.style.display,
        submit: submitBtn.style.display
    });
}

function nextStep() {
    if (validateCurrentStep()) {
        if (currentStep < totalSteps) {
            currentStep++;
            showStep(currentStep);
        }
    }
}

function previousStep() {
    if (currentStep > 1) {
        currentStep--;
        showStep(currentStep);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞
function increaseAge(inputId) {
    const input = document.getElementById(inputId);
    let currentValue = parseInt(input.value);
    const maxValue = parseInt(input.max) || 100;
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 18
    if (isNaN(currentValue) || !input.value) {
        input.value = 18;
        validateAgeRange();
        return;
    }
    
    if (currentValue < maxValue) {
        input.value = currentValue + 1;
        validateAgeRange();
    }
}

function decreaseAge(inputId) {
    const input = document.getElementById(inputId);
    let currentValue = parseInt(input.value);
    const minValue = parseInt(input.min) || 18;
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 18
    if (isNaN(currentValue) || !input.value) {
        input.value = 18;
        validateAgeRange();
        return;
    }
    
    if (currentValue > minValue) {
        input.value = currentValue - 1;
        validateAgeRange();
    }
}

function validateAgeRange() {
    const ageFrom = document.getElementById('ageFrom');
    const ageTo = document.getElementById('ageTo');
    
    if (ageFrom && ageTo) {
        const fromValue = parseInt(ageFrom.value) || 18;
        const toValue = parseInt(ageTo.value) || 18;
        
        // –ï—Å–ª–∏ "–æ—Ç" –±–æ–ª—å—à–µ "–¥–æ", –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º "–¥–æ"
        if (fromValue > toValue) {
            ageTo.value = fromValue;
        }
    }
}

function validateCurrentStep() {
    console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–∞ ${currentStep}`, formData);
    
    switch(currentStep) {
        case 1: // –ü–æ–ª
            const hasGender = !!formData.gender;
            console.log(`–®–∞–≥ 1 (–ü–æ–ª): ${hasGender ? '‚úÖ' : '‚ùå'}`, formData.gender);
            return hasGender;
        case 2: // –ö–æ–≥–æ –∏—â–µ—Ç
            const hasTarget = !!formData.target;
            console.log(`–®–∞–≥ 2 (–ö–æ–≥–æ –∏—â–µ—Ç): ${hasTarget ? '‚úÖ' : '‚ùå'}`, formData.target);
            return hasTarget;
        case 3: // –¶–µ–ª—å
            const hasGoal = !!formData.goal;
            console.log(`–®–∞–≥ 3 (–¶–µ–ª—å): ${hasGoal ? '‚úÖ' : '‚ùå'}`, formData.goal);
            return hasGoal;
        case 4: // –í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            const ageFrom = document.getElementById('ageFrom').value;
            const ageTo = document.getElementById('ageTo').value;
            if (ageFrom && ageTo) {
                formData.ageFrom = ageFrom;
                formData.ageTo = ageTo;
                console.log(`–®–∞–≥ 4 (–í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞): ‚úÖ ${ageFrom}-${ageTo}`);
                return true;
            }
            console.log(`–®–∞–≥ 4 (–í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞): ‚ùå`);
            return false;
        case 5: // –ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç
            const myAge = document.getElementById('myAge').value;
            if (myAge) {
                formData.myAge = myAge;
                console.log(`–®–∞–≥ 5 (–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç): ‚úÖ ${myAge}`);
                return true;
            }
            console.log(`–®–∞–≥ 5 (–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç): ‚ùå`);
            return false;
        case 6: // –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
            const hasBody = !!formData.body;
            console.log(`–®–∞–≥ 6 (–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ): ${hasBody ? '‚úÖ' : '‚ùå'}`, formData.body);
            return hasBody;
        case 7: // –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const adText = document.getElementById('adText')?.value.trim();
            console.log(`–®–∞–≥ 7 (–¢–µ–∫—Å—Ç): textarea —ç–ª–µ–º–µ–Ω—Ç:`, document.getElementById('adText'));
            console.log(`–®–∞–≥ 7 (–¢–µ–∫—Å—Ç): –∑–Ω–∞—á–µ–Ω–∏–µ:`, adText);
            if (adText && adText.length >= 10) {
                formData.text = adText;
                console.log(`–®–∞–≥ 7 (–¢–µ–∫—Å—Ç): ‚úÖ ${adText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                return true;
            }
            console.log(`–®–∞–≥ 7 (–¢–µ–∫—Å—Ç): ‚ùå —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç`);
            tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)');
            return false;
    }
    return false;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ (—Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–∫–∞—Ü–∏–∏)

function selectGender(gender) {
    document.querySelectorAll('.gender-btn').forEach(btn => btn.classList.remove('selected'));
    document.querySelector(`[data-gender="${gender}"]`).classList.add('selected');
    formData.gender = gender;
}

function selectTarget(target) {
    document.querySelectorAll('.target-btn').forEach(btn => btn.classList.remove('selected'));
    document.querySelector(`[data-target="${target}"]`).classList.add('selected');
    formData.target = target;
}

function selectGoal(goal) {
    document.querySelectorAll('.goal-btn').forEach(btn => btn.classList.remove('selected'));
    document.querySelector(`[data-goal="${goal}"]`).classList.add('selected');
    formData.goal = goal;
}

function selectBody(body) {
    document.querySelectorAll('.body-btn').forEach(btn => btn.classList.remove('selected'));
    document.querySelector(`[data-body="${body}"]`).classList.add('selected');
    formData.body = body;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async function submitAd() {
    if (!validateCurrentStep()) {
        tg.showAlert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const adTextElement = document.getElementById('adText');
        const adText = adTextElement ? adTextElement.value.trim() : '';
        
        if (!adText) {
            tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
            return;
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Supabase
        const adData = {
            gender: formData.gender,
            target: formData.target,
            goal: formData.goal,
            ageFrom: formData.ageFrom,
            ageTo: formData.ageTo,
            myAge: formData.myAge,
            body: formData.body,
            text: adText,
            country: formData.country || '–†–æ—Å—Å–∏—è',
            region: formData.region || '',
            city: formData.city,
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
            tgId: getCurrentUserId()
        };

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Supabase:', adData);
        console.log('Telegram User ID:', getCurrentUserId());


        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const submitBtn = document.getElementById('submitBtn');
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.textContent = '‚è≥ –ü—É–±–ª–∏–∫—É–µ–º...';
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Supabase —á–µ—Ä–µ–∑ –Ω–∞—à API
        const result = await window.SupabaseClient.createAd(adData);
        
        console.log('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:', result);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        tg.showAlert('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!', () => {
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            formData = {};
            currentStep = 1;
            showScreen('mainMenu');
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        tg.showAlert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ' + error.message);
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const submitBtn = document.getElementById('submitBtn');
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = 'üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å';
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async function loadAds(filters = {}) {
    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const adsList = document.getElementById('adsList');
        if (adsList) {
            adsList.innerHTML = `
                <div class="loading-container">
                    <div class="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è...</p>
                </div>
            `;
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ Supabase —á–µ—Ä–µ–∑ API
        const ads = await window.SupabaseClient.getAds(filters);
        
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', ads.length);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        displayAds(ads, filters.city);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
        const adsList = document.getElementById('adsList');
        if (adsList) {
            adsList.innerHTML = `
                <div class="no-ads">
                    <div class="neon-icon">‚ö†Ô∏è</div>
                    <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                    <p>${error.message}</p>
                </div>
            `;
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async function getAllAds() {
    const ads = await window.SupabaseClient.getAds();
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ (–∏ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫—à–∏–µ), –ø–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
    const now = new Date();
    return ads.sort((a, b) => {
        const aPinned = a.is_pinned && (!a.pinned_until || new Date(a.pinned_until) > now);
        const bPinned = b.is_pinned && (!b.pinned_until || new Date(b.pinned_until) > now);
        
        if (aPinned && !bPinned) return -1;
        if (!aPinned && bPinned) return 1;
        
        // –ï—Å–ª–∏ –æ–±–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∏–ª–∏ –æ–±–∞ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        return new Date(b.created_at) - new Date(a.created_at);
    });
}

function displayAds(ads, city = null) {
    const adsList = document.getElementById('adsList');
    
    if (!ads || ads.length === 0) {
        adsList.innerHTML = `
            <div class="no-ads">
                <div class="neon-icon">üòî</div>
                <h3>–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π</h3>
                <p>–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!</p>
            </div>
        `;
        return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥—É –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    let filteredAds = city ? ads.filter(ad => ad.city === city) : ads;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –≤–≤–µ—Ä—Ö—É
    const now = new Date();
    filteredAds = filteredAds.sort((a, b) => {
        const aPinned = a.is_pinned && (!a.pinned_until || new Date(a.pinned_until) > now);
        const bPinned = b.is_pinned && (!b.pinned_until || new Date(b.pinned_until) > now);
        
        if (aPinned && !bPinned) return -1;
        if (!aPinned && bPinned) return 1;
        
        return new Date(b.created_at) - new Date(a.created_at);
    });

    adsList.innerHTML = filteredAds.map((ad, index) => {
        // Supabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è —Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ (age_from, my_age –∏ —Ç.–¥.)
        const myAge = ad.my_age || ad.myAge || '?';
        const isPinned = ad.is_pinned && (!ad.pinned_until || new Date(ad.pinned_until) > now);
        
        return `
        <div class="ad-card" onclick="showAdDetails(${index})">
            ${isPinned ? '<span class="pinned-badge">üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ</span>' : ''}
            <div class="ad-info">
                <div class="ad-field">
                    <span class="icon">üèô</span>
                    <span class="label">–ì–æ—Ä–æ–¥:</span>
                    <span class="value">${ad.city}</span>
                </div>
                <div class="ad-field">
                    <span class="icon">üë§</span>
                    <span class="label">–ü–æ–ª:</span>
                    <span class="value">${ad.gender}</span>
                </div>
                <div class="ad-field">
                    <span class="icon">üîç</span>
                    <span class="label">–ò—â–µ—Ç:</span>
                    <span class="value">${ad.target}</span>
                </div>
                <div class="ad-field">
                    <span class="icon">üéØ</span>
                    <span class="label">–¶–µ–ª—å:</span>
                    <span class="value">${ad.goal}</span>
                </div>
                <div class="ad-field">
                    <span class="icon">üéÇ</span>
                    <span class="label">–í–æ–∑—Ä–∞—Å—Ç:</span>
                    <span class="value">${myAge} –ª–µ—Ç</span>
                </div>
            </div>
            <div class="ad-text">
                "${ad.text.substring(0, 100)}${ad.text.length > 100 ? '...' : ''}"
            </div>
        </div>
    `;
    }).join('');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è showAdDetails
    window.currentAds = filteredAds;
}

function handleCityFilter(city) {
    // –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞
    document.querySelectorAll('.city-btn.filter').forEach(btn => {
        btn.classList.remove('selected');
    });

    // –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    document.querySelector(`[data-city="${city}"].filter`).classList.add('selected');

    // –ó–∞–ø—Ä–æ—Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥—É
    tg.sendData(JSON.stringify({
        action: 'getAdsByCity',
        city: city
    }));
}

function showAdDetails(index) {
    const ad = window.currentAds?.[index];
    
    if (!ad) {
        alert('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const adContent = document.getElementById('adContent');
    if (!adContent) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É"
    window.currentAdIndex = index;
    
    const myAge = ad.my_age || ad.myAge || '?';
    const ageFrom = ad.age_from || ad.ageFrom || '?';
    const ageTo = ad.age_to || ad.ageTo || '?';
    const bodyType = ad.body_type || ad.body || '?';
    
    adContent.innerHTML = `
        <div class="ad-full">
            <div class="ad-header">
                <h3>üìç ${ad.city}</h3>
                <span class="ad-date">${new Date(ad.created_at).toLocaleDateString('ru-RU')}</span>
            </div>
            
            <div class="ad-info-grid">
                <div class="info-item">
                    <span class="icon">üë§</span>
                    <div>
                        <div class="label">–ü–æ–ª</div>
                        <div class="value">${ad.gender}</div>
                    </div>
                </div>
                
                <div class="info-item">
                    <span class="icon">üîç</span>
                    <div>
                        <div class="label">–ò—â–µ—Ç</div>
                        <div class="value">${ad.target}</div>
                    </div>
                </div>
                
                <div class="info-item">
                    <span class="icon">üéØ</span>
                    <div>
                        <div class="label">–¶–µ–ª—å</div>
                        <div class="value">${ad.goal}</div>
                    </div>
                </div>
                
                <div class="info-item">
                    <span class="icon">üìÖ</span>
                    <div>
                        <div class="label">–í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞</div>
                        <div class="value">${ageFrom} - ${ageTo} –ª–µ—Ç</div>
                    </div>
                </div>
                
                <div class="info-item">
                    <span class="icon">üéÇ</span>
                    <div>
                        <div class="label">–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç</div>
                        <div class="value">${myAge} –ª–µ—Ç</div>
                    </div>
                </div>
                
                <div class="info-item">
                    <span class="icon">üí™</span>
                    <div>
                        <div class="label">–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ</div>
                        <div class="value">${bodyType}</div>
                    </div>
                </div>
            </div>
            
            <div class="ad-description">
                <h4>üí¨ –û —Å–µ–±–µ:</h4>
                <p>${ad.text}</p>
            </div>
        </div>
    `;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É"
    const contactBtn = document.querySelector('#adDetails button.neon-button');
    if (contactBtn) {
        contactBtn.onclick = () => contactAuthor(index);
    }
    
    showScreen('adDetails');
}

// –ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async function contactAuthor(adIndex) {
    const ad = window.currentAds?.[adIndex];
    
    if (!ad) {
        alert('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const currentUserId = getCurrentUserId();
    if (currentUserId.startsWith('web_')) {
        alert('‚ö†Ô∏è –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram');
        showTelegramAuthModal();
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ
    if (ad.tg_id === currentUserId) {
        alert('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        return;
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = prompt('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è:');
    
    if (!message || message.trim() === '') {
        return;
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const savedUser = localStorage.getItem('telegram_user');
        let senderName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        if (savedUser) {
            try {
                const userData = JSON.parse(savedUser);
                senderName = userData.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                if (userData.last_name) {
                    senderName += ' ' + userData.last_name;
                }
            } catch (e) {
                console.error('Error parsing user data:', e);
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
        const response = await fetch('/api/send-message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                adId: ad.id,
                senderTgId: currentUserId,
                receiverTgId: ad.tg_id,
                messageText: message.trim(),
                senderName: senderName
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –±–æ—Ç–µ –∏ —Å–º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å –≤–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç.');
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + (result.error || 'Unknown error'));
        }
        
    } catch (error) {
        console.error('Error sending message:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –£–¥–∞–ª–∏—Ç—å –º–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
async function deleteMyAd(adId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?')) {
        return;
    }
    
    try {
        const deleted = await window.SupabaseClient.deleteAd(adId);
        
        if (deleted) {
            tg.showAlert('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            loadMyAds();
        } else {
            tg.showAlert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }
    } catch (error) {
        console.error('Error deleting ad:', error);
        tg.showAlert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
    }
}

// –ó–∞–∫—Ä–µ–ø–∏—Ç—å/–æ—Ç–∫—Ä–µ–ø–∏—Ç—å –º–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
async function pinMyAd(adId, shouldPin) {
    try {
        const pinned = await window.SupabaseClient.togglePinAd(adId, shouldPin);
        
        if (pinned) {
            if (shouldPin) {
                tg.showAlert('‚úÖ –§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞!\n\n–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –Ω–∞ 24 —á–∞—Å–∞.');
            } else {
                tg.showAlert('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ');
            }
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            loadMyAds();
        } else {
            tg.showAlert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('Error pinning ad:', error);
        tg.showAlert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è');
    }
}

// –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
function autoDetectLocation() {
    if (!navigator.geolocation) {
        alert('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading
    const setupContainer = document.querySelector('.location-setup-container');
    if (setupContainer) {
        setupContainer.innerHTML = `
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p>üìç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é...</p>
                <p style="font-size: 0.9rem; opacity: 0.7;">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</p>
            </div>
        `;
    }
    
    navigator.geolocation.getCurrentPosition(
        async (position) => {
            const { latitude, longitude } = position.coords;
            console.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', latitude, longitude);
            
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º BigDataCloud API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –±–µ–∑ –∫–ª—é—á–∞)
                const response = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=ru`);
                
                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è');
                }
                
                const data = await response.json();
                console.log('–î–∞–Ω–Ω—ã–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', data);
                
                const country = data.countryName;
                const region = data.principalSubdivision || data.locality;
                const city = data.city || data.locality;
                
                console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { country, region, city });
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                let detectedCountry = null;
                if (country && (country.includes('–†–æ—Å—Å–∏') || country === 'Russia')) {
                    detectedCountry = 'russia';
                } else if (country && (country.includes('–ö–∞–∑–∞—Ö') || country === 'Kazakhstan')) {
                    detectedCountry = 'kazakhstan';
                }
                
                if (detectedCountry && region && city) {
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
                    userLocation = {
                        country: detectedCountry,
                        region: region,
                        city: city
                    };
                    
                    localStorage.setItem('userLocation', JSON.stringify(userLocation));
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    updateUserLocationDisplay();
                    
                    alert(`‚úÖ –õ–æ–∫–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:\n${locationData[detectedCountry].flag} ${region}, ${city}`);
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    setTimeout(() => showMainMenu(), 500);
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:', { detectedCountry, region, city, rawCountry: country });
                    alert(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é.\n\n–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${country || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.`);
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —ç–∫—Ä–∞–Ω –ª–æ–∫–∞—Ü–∏–∏
                    showLocationSetup();
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
                alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.');
                showLocationSetup();
            }
        },
        (error) => {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            let errorMsg = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n\n';
            if (error.code === 1) {
                errorMsg += '–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.';
            } else if (error.code === 2) {
                errorMsg += '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.';
            } else if (error.code === 3) {
                errorMsg += '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.';
            }
            errorMsg += '\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é.';
            
            alert(errorMsg);
            showLocationSetup();
        },
        {
            enableHighAccuracy: true,
            timeout: 15000,
            maximumAge: 0
        }
    );
}

// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
function resetForm() {
    formData = {};
    currentStep = 1;
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤
    document.querySelectorAll('.selected').forEach(el => {
        el.classList.remove('selected');
    });
    
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
    document.getElementById('customCity').value = '';
    document.getElementById('ageFrom').value = '';
    document.getElementById('ageTo').value = '';
    document.getElementById('myAge').value = '';
    document.getElementById('adText').value = '';
    
    showStep(1);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Email Service
async function loadEmailService() {
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = './email-service.js';
        script.onload = () => {
            console.log('‚úÖ Email Service –∑–∞–≥—Ä—É–∂–µ–Ω');
            resolve();
        };
        script.onerror = () => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Email Service');
            reject(new Error('Failed to load Email Service'));
        };
        document.head.appendChild(script);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
tg.onEvent('web_app_data_received', function(data) {
    try {
        const response = JSON.parse(data);
        
        switch(response.action) {
            case 'adsLoaded':
                displayAds(response.ads);
                break;
            case 'cityAdsLoaded':
                displayAds(response.ads, response.city);
                break;
            case 'adCreated':
                tg.showAlert('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!');
                showMainMenu();
                break;
            default:
                console.log('Unknown response:', response);
        }
    } catch (error) {
        console.error('Error parsing bot data:', error);
    }
});

// –î–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–π
const locationData = {
    russia: {
        name: '–†–æ—Å—Å–∏—è',
        flag: 'üá∑üá∫',
        regions: {
            '–ú–æ—Å–∫–≤–∞': ['–ú–æ—Å–∫–≤–∞'],
            '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': ['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
            '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ë–∞–ª–∞—à–∏—Ö–∞', '–ü–æ–¥–æ–ª—å—Å–∫', '–•–∏–º–∫–∏', '–ö–æ—Ä–æ–ª—ë–≤', '–ú—ã—Ç–∏—â–∏', '–õ—é–±–µ—Ä—Ü—ã', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å', '–ö–æ–ª–æ–º–Ω–∞', '–û–¥–∏–Ω—Ü–æ–≤–æ'],
            '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ì–∞—Ç—á–∏–Ω–∞', '–í—ã–±–æ—Ä–≥', '–°–æ—Å–Ω–æ–≤—ã–π –ë–æ—Ä', '–¢–∏—Ö–≤–∏–Ω', '–ö–∏—Ä–∏—à–∏', '–í–æ–ª—Ö–æ–≤'],
            '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ë–µ—Ä–¥—Å–∫', '–ò—Å–∫–∏—Ç–∏–º', '–ö—É–π–±—ã—à–µ–≤', '–û–±—å'],
            '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ù–∏–∂–Ω–∏–π –¢–∞–≥–∏–ª', '–ö–∞–º–µ–Ω—Å–∫-–£—Ä–∞–ª—å—Å–∫–∏–π', '–ü–µ—Ä–≤–æ—É—Ä–∞–ª—å—Å–∫', '–°–µ—Ä–æ–≤'],
            '–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω': ['–ö–∞–∑–∞–Ω—å', '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã', '–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫', '–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫', '–ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫'],
            '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π': ['–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–°–æ—á–∏', '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫', '–ê—Ä–º–∞–≤–∏—Ä', '–ì–µ–ª–µ–Ω–¥–∂–∏–∫'],
            '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–¢–∞–≥–∞–Ω—Ä–æ–≥', '–®–∞—Ö—Ç—ã', '–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫', '–í–æ–ª–≥–æ–¥–æ–Ω—Å–∫'],
            '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ß–µ–ª—è–±–∏–Ω—Å–∫', '–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫', '–ó–ª–∞—Ç–æ—É—Å—Ç', '–ú–∏–∞—Å—Å', '–ö–æ–ø–µ–π—Å–∫'],
            '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫', '–ê—Ä–∑–∞–º–∞—Å', '–°–∞—Ä–æ–≤', '–ë–æ—Ä'],
            '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', '–°–æ–≤–µ—Ç—Å–∫', '–ß–µ—Ä–Ω—è—Ö–æ–≤—Å–∫', '–ë–∞–ª—Ç–∏–π—Å–∫'],
            '–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ö–∞–ª—É–≥–∞', '–û–±–Ω–∏–Ω—Å–∫', '–õ—é–¥–∏–Ω–æ–≤–æ'],
            '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ö—É—Ä—Å–∫', '–ñ–µ–ª–µ–∑–Ω–æ–≥–æ—Ä—Å–∫', '–ö—É—Ä—á–∞—Ç–æ–≤'],
            '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ö–µ–º–µ—Ä–æ–≤–æ', '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫', '–ü—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫', '–ú–µ–∂–¥—É—Ä–µ—á–µ–Ω—Å–∫'],
            '–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ö–∏—Ä–æ–≤', '–ö–∏—Ä–æ–≤–æ-–ß–µ–ø–µ—Ü–∫', '–í—è—Ç—Å–∫–∏–µ –ü–æ–ª—è–Ω—ã'],
            '–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ö–æ—Å—Ç—Ä–æ–º–∞', '–ë—É–π', '–ù–µ—Ä–µ—Ö—Ç–∞']
        }
    },
    kazakhstan: {
        name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
        flag: 'üá∞üáø',
        regions: {
            '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ê–ª–º–∞—Ç—ã', '–¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω', '–ö–∞–ø—á–∞–≥–∞–π', '–¢–µ–∫–µ–ª–∏', '–ñ–∞—Ä–∫–µ–Ω—Ç'],
            '–ù—É—Ä-–°—É–ª—Ç–∞–Ω': ['–ù—É—Ä-–°—É–ª—Ç–∞–Ω (–ê—Å—Ç–∞–Ω–∞)'],
            '–®—ã–º–∫–µ–Ω—Ç': ['–®—ã–º–∫–µ–Ω—Ç'],
            '–ê–∫—Ç—é–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ê–∫—Ç–æ–±–µ', '–•—Ä–æ–º—Ç–∞—É', '–ê–ª–≥–∞', '–¢–µ–º–∏—Ä'],
            '–ê—Ç—ã—Ä–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ê—Ç—ã—Ä–∞—É', '–ö—É–ª—å—Å–∞—Ä—ã', '–ñ—ã–ª—ã–æ–π'],
            '–ó–∞–ø–∞–¥–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–£—Ä–∞–ª—å—Å–∫', '–ê–∫—Å–∞–π', '–ö–∞–∑—Ç–∞–ª–æ–≤–∫–∞'],
            '–ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ö–∞—Ä–∞–≥–∞–Ω–¥–∞', '–¢–µ–º–∏—Ä—Ç–∞—É', '–ñ–µ–∑–∫–∞–∑–≥–∞–Ω', '–ë–∞–ª—Ö–∞—à'],
            '–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ö–æ—Å—Ç–∞–Ω–∞–π', '–†—É–¥–Ω—ã–π', '–ñ–∏—Ç–∏–∫–∞—Ä–∞', '–õ–∏—Å–∞–∫–æ–≤—Å–∫'],
            '–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ê–∫—Ç–∞—É', '–ñ–∞–Ω–∞–æ–∑–µ–Ω', '–ë–µ–π–Ω–µ—É'],
            '–ü–∞–≤–ª–æ–¥–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ü–∞–≤–ª–æ–¥–∞—Ä', '–≠–∫–∏–±–∞—Å—Ç—É–∑', '–ê–∫—Å—É'],
            '–°–µ–≤–µ—Ä–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫', '–ë—É–ª–∞–µ–≤–æ', '–¢–∞–π—ã–Ω—à–∞'],
            '–í–æ—Å—Ç–æ—á–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫', '–°–µ–º–µ–π', '–†–∏–¥–¥–µ—Ä', '–ó—ã—Ä—è–Ω–æ–≤—Å–∫'],
            '–ñ–∞–º–±—ã–ª—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–¢–∞—Ä–∞–∑', '–ñ–∞–Ω–∞—Ç–∞—Å', '–ö–∞—Ä–∞—Ç–∞—É', '–®—É'],
            '–ö—ã–∑—ã–ª–æ—Ä–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ö—ã–∑—ã–ª–æ—Ä–¥–∞', '–ë–∞–π–∫–æ–Ω—É—Ä', '–ê—Ä–∞–ª']
        }
    }
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞—Ü–∏–∏
let selectedCountry = null;
let selectedRegion = null;
let selectedCity = null;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
let setupSelectedCountry = null;
let setupSelectedRegion = null;
let setupSelectedCity = null;

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userLocation = null;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
let filterSelectedCountry = null;
let filterSelectedRegion = null;
let filterSelectedCity = null;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function checkUserLocation() {
    console.log('checkUserLocation –≤—ã–∑–≤–∞–Ω–∞');
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ Telegram Web App Storage
    try {
        if (tg.CloudStorage) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Cloud Storage');
            tg.CloudStorage.getItem('userLocation', function(err, value) {
                console.log('CloudStorage —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {err, value});
                if (!err && value) {
                    userLocation = JSON.parse(value);
                    console.log('–ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è:', userLocation);
                    displayUserLocation();
                    showMainMenu();
                } else {
                    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ');
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ IP
                    showAutoLocationDetection();
                }
            });
        } else {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º localStorage');
            // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
            const savedLocation = localStorage.getItem('userLocation');
            console.log('localStorage —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', savedLocation);
            if (savedLocation) {
                userLocation = JSON.parse(savedLocation);
                console.log('–ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –≤ localStorage:', userLocation);
                displayUserLocation();
                showMainMenu();
            } else {
                console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ');
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ IP
                showAutoLocationDetection();
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏:', error);
        showAutoLocationDetection();
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP
async function detectLocationByIP() {
    const detectionText = document.querySelector('.detection-text');
    console.log('detectLocationByIP –≤—ã–∑–≤–∞–Ω–∞');
    console.log('detectionText —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', !!detectionText);
    
    if (!detectionText) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç .detection-text –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        showPopularLocations();
        return;
    }
    
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
        detectionText.textContent = '–°–∫–∞–Ω–∏—Ä—É–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–ª–µ–¥';
        await new Promise(resolve => setTimeout(resolve, 1200));
        
        detectionText.textContent = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã';
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ API
        detectionText.textContent = '–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é';
        let locationData = null;
        
        // –í–∞—Ä–∏–∞–Ω—Ç 1: ipinfo.io (—á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ CORS)
        try {
            const response1 = await fetch('https://ipinfo.io/json');
            const data1 = await response1.json();
            if (data1 && data1.country) {
                locationData = {
                    country_code: data1.country,
                    country_name: data1.country,
                    region: data1.region,
                    city: data1.city
                };
            }
        } catch (e) {
            console.log('ipinfo.io –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e);
        }
        
        // –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π
        if (!locationData) {
            try {
                const response2 = await fetch('https://api.ipify.org?format=json');
                const ipData = await response2.json();
                console.log('IP –∞–¥—Ä–µ—Å:', ipData.ip);
                
                // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
                const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
                console.log('–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:', timezone);
                
                locationData = guessLocationByTimezone(timezone);
            } catch (e) {
                console.log('–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', e);
            }
        }
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        console.log('–î–∞–Ω–Ω—ã–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', locationData);
        
        if (locationData && locationData.country_code) {
            detectionText.textContent = '–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö';
            await new Promise(resolve => setTimeout(resolve, 600));
            
            detectionText.textContent = '–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ';
            await new Promise(resolve => setTimeout(resolve, 400));
            
            const detectedLocation = processIPLocation(locationData);
            if (detectedLocation) {
                showDetectedLocationResult(detectedLocation);
                return;
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        showPopularLocations();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP:', error);
        showPopularLocations();
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
function guessLocationByTimezone(timezone) {
    console.log('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É:', timezone);
    
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏ –∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
    const timezoneMap = {
        'Europe/Moscow': { country_code: 'RU', country_name: '–†–æ—Å—Å–∏—è', region: '–ú–æ—Å–∫–≤–∞', city: '–ú–æ—Å–∫–≤–∞' },
        'Europe/Samara': { country_code: 'RU', country_name: '–†–æ—Å—Å–∏—è', region: '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', city: '–°–∞–º–∞—Ä–∞' },
        'Asia/Yekaterinburg': { country_code: 'RU', country_name: '–†–æ—Å—Å–∏—è', region: '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', city: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' },
        'Asia/Novosibirsk': { country_code: 'RU', country_name: '–†–æ—Å—Å–∏—è', region: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', city: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' },
        'Asia/Krasnoyarsk': { country_code: 'RU', country_name: '–†–æ—Å—Å–∏—è', region: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π', city: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫' },
        'Asia/Irkutsk': { country_code: 'RU', country_name: '–†–æ—Å—Å–∏—è', region: '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', city: '–ò—Ä–∫—É—Ç—Å–∫' },
        'Asia/Vladivostok': { country_code: 'RU', country_name: '–†–æ—Å—Å–∏—è', region: '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π', city: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫' },
        'Asia/Almaty': { country_code: 'KZ', country_name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', region: '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', city: '–ê–ª–º–∞—Ç—ã' },
        'Asia/Qyzylorda': { country_code: 'KZ', country_name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', region: '–ö—ã–∑—ã–ª–æ—Ä–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', city: '–ö—ã–∑—ã–ª–æ—Ä–¥–∞' },
        'Asia/Aqtobe': { country_code: 'KZ', country_name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', region: '–ê–∫—Ç—é–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', city: '–ê–∫—Ç–æ–±–µ' }
    };
    
    return timezoneMap[timezone] || null;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
function showPopularLocations() {
    const animationDiv = document.querySelector('.detection-animation');
    const resultDiv = document.querySelector('.detection-result');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animationDiv.style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    resultDiv.innerHTML = `
        <div class="popular-locations">
            <div class="info-icon">üåç</div>
            <h3>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω</h3>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.<br>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:</p>
            
            <div class="popular-options">
                <button class="location-option russia" onclick="selectPopularLocation('russia', '–ú–æ—Å–∫–≤–∞', '–ú–æ—Å–∫–≤–∞')">
                    <span class="flag">üá∑üá∫</span>
                    <div class="location-details">
                        <strong>–†–æ—Å—Å–∏—è</strong>
                        <span>–ú–æ—Å–∫–≤–∞</span>
                    </div>
                </button>
                
                <button class="location-option russia" onclick="selectPopularLocation('russia', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')">
                    <span class="flag">üá∑üá∫</span>
                    <div class="location-details">
                        <strong>–†–æ—Å—Å–∏—è</strong>
                        <span>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</span>
                    </div>
                </button>
                
                <button class="location-option kazakhstan" onclick="selectPopularLocation('kazakhstan', '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ê–ª–º–∞—Ç—ã')">
                    <span class="flag">üá∞üáø</span>
                    <div class="location-details">
                        <strong>–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω</strong>
                        <span>–ê–ª–º–∞—Ç—ã</span>
                    </div>
                </button>
                
                <button class="location-option kazakhstan" onclick="selectPopularLocation('kazakhstan', '–ù—É—Ä-–°—É–ª—Ç–∞–Ω', '–ù—É—Ä-–°—É–ª—Ç–∞–Ω (–ê—Å—Ç–∞–Ω–∞)')">
                    <span class="flag">üá∞üáø</span>
                    <div class="location-details">
                        <strong>–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω</strong>
                        <span>–ù—É—Ä-–°—É–ª—Ç–∞–Ω</span>
                    </div>
                </button>
            </div>
            
            <div class="manual-choice">
                <button class="manual-btn" onclick="showManualLocationSetup()">
                    üéØ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–æ–∫–∞—Ü–∏—é
                </button>
            </div>
        </div>
    `;
    
    resultDiv.style.display = 'block';
}

// –í—ã–±–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
function selectPopularLocation(country, region, city) {
    console.log('–í—ã–±—Ä–∞–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è:', {country, region, city});
    confirmDetectedLocation(country, region, city);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function processIPLocation(data) {
    const countryCode = (data.country_code || data.country || '').toLowerCase();
    const regionName = data.region;
    const cityName = data.city;
    
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏:', {countryCode, regionName, cityName});
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã
    let mappedCountry = null;
    if (countryCode === 'ru' || countryCode === 'russia') {
        mappedCountry = 'russia';
    } else if (countryCode === 'kz' || countryCode === 'kazakhstan') {
        mappedCountry = 'kazakhstan';
    }
    
    if (!mappedCountry) {
        console.log('–°—Ç—Ä–∞–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', countryCode);
        return null;
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–≥–∏–æ–Ω –∏ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const countryData = locationData[mappedCountry];
    let foundRegion = null;
    let foundCity = null;
    
    // –ü–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞
    if (regionName) {
        for (const region in countryData.regions) {
            if (region.toLowerCase().includes(regionName.toLowerCase()) || 
                regionName.toLowerCase().includes(region.toLowerCase())) {
                foundRegion = region;
                break;
            }
        }
    }
    
    // –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
    if (cityName && foundRegion) {
        const cities = countryData.regions[foundRegion];
        foundCity = cities.find(city => 
            city.toLowerCase().includes(cityName.toLowerCase()) ||
            cityName.toLowerCase().includes(city.toLowerCase())
        );
    }
    
    // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ, –∏—â–µ–º –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º
    if (cityName && !foundCity) {
        for (const region in countryData.regions) {
            const cities = countryData.regions[region];
            const city = cities.find(city => 
                city.toLowerCase().includes(cityName.toLowerCase()) ||
                cityName.toLowerCase().includes(city.toLowerCase())
            );
            if (city) {
                foundRegion = region;
                foundCity = city;
                break;
            }
        }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –±–∞–∑–æ–≤—É—é –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
    return {
        country: mappedCountry,
        region: foundRegion || Object.keys(countryData.regions)[0],
        city: foundCity || countryData.regions[foundRegion || Object.keys(countryData.regions)[0]][0],
        detected: {
            country: data.country_name,
            region: regionName,
            city: cityName
        }
    };
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
function showDetectedLocationResult(detectedLocation) {
    const animationDiv = document.querySelector('.detection-animation');
    const resultDiv = document.querySelector('.detection-result');
    const countryFlag = locationData[detectedLocation.country].flag;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animationDiv.style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    resultDiv.innerHTML = `
        <div class="detected-location">
            <div class="success-icon">‚ú®</div>
            <h3>–ú—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?</h3>
            <div class="location-info">
                <span class="location-flag">${countryFlag}</span>
                <span class="location-text">${detectedLocation.region}, ${detectedLocation.city}</span>
            </div>
            <p class="detection-note">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ IP-–∞–¥—Ä–µ—Å—É: ${detectedLocation.detected.country}${detectedLocation.detected.region ? ', ' + detectedLocation.detected.region : ''}${detectedLocation.detected.city ? ', ' + detectedLocation.detected.city : ''}</p>
            <div class="location-actions">
                <button class="confirm-btn" onclick="confirmDetectedLocation('${detectedLocation.country}', '${detectedLocation.region}', '${detectedLocation.city}')">
                    ‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ
                </button>
                <button class="manual-btn" onclick="showManualLocationSetup()">
                    üéØ –ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é
                </button>
            </div>
        </div>
    `;
    
    resultDiv.style.display = 'block';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP
function showIPDetectionError() {
    const animationDiv = document.querySelector('.detection-animation');
    const resultDiv = document.querySelector('.detection-result');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animationDiv.style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    resultDiv.innerHTML = `
        <div class="detection-error">
            <div class="error-icon">üòî</div>
            <h3>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h3>
            <p>–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p>
            <div class="location-actions">
                <button class="manual-btn" onclick="showManualLocationSetup()">
                    üéØ –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é
                </button>
            </div>
        </div>
    `;
    
    resultDiv.style.display = 'block';
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
function confirmDetectedLocation(country, region, city) {
    console.log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏:', {country, region, city});
    saveUserLocation(country, region, city);
    displayUserLocation();
    updateFormLocationDisplay();
    showMainMenu();
}

// –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
function resetAndDetectLocation() {
    console.log('–°–±—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è');
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try {
        if (tg.CloudStorage) {
            tg.CloudStorage.removeItem('userLocation', function(err) {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ CloudStorage:', err);
                } else {
                    console.log('–õ–æ–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ CloudStorage');
                }
            });
        }
        localStorage.removeItem('userLocation');
        console.log('–õ–æ–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ localStorage');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    userLocation = null;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    showAutoLocationDetection();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function displayUserLocation() {
    if (userLocation) {
        const locationText = `${locationData[userLocation.country].flag} ${userLocation.region}, ${userLocation.city}`;
        const locationDisplay = document.getElementById('userLocationDisplay');
        if (locationDisplay) {
            locationDisplay.textContent = locationText;
        }
        console.log('–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', locationText);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserLocation(country, region, city) {
    userLocation = {
        country: country,
        region: region,
        city: city,
        timestamp: Date.now()
    };
    
    try {
        if (tg.CloudStorage) {
            tg.CloudStorage.setItem('userLocation', JSON.stringify(userLocation), function(err) {
                if (!err) {
                    console.log('–õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Telegram Cloud Storage');
                } else {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Cloud Storage:', err);
                    localStorage.setItem('userLocation', JSON.stringify(userLocation));
                }
            });
        } else {
            localStorage.setItem('userLocation', JSON.stringify(userLocation));
            console.log('–õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:', error);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
function showAutoLocationDetection() {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏');
    showScreen('autoLocationDetection');
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP');
        detectLocationByIP();
    }, 1000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
function showManualLocationSetup() {
    showScreen('locationSetup');
    resetSetupLocation();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function showLocationSetup() {
    showManualLocationSetup();
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
function saveLocationAndContinue() {
    if (setupSelectedCountry && setupSelectedRegion && setupSelectedCity) {
        saveUserLocation(setupSelectedCountry, setupSelectedRegion, setupSelectedCity);
        displayUserLocation();
        updateFormLocationDisplay();
        showMainMenu();
    } else {
        tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, —Ä–µ–≥–∏–æ–Ω –∏ –≥–æ—Ä–æ–¥');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞—Ü–∏–∏
function initLocationSelector() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞–Ω (—Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è)
    document.querySelectorAll('.form-country:not(.filter-country)').forEach(btn => {
        btn.addEventListener('click', function() {
            selectCountry(this.dataset.country);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞–Ω (—Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
    document.querySelectorAll('.filter-country').forEach(btn => {
        btn.addEventListener('click', function() {
            selectFilterCountry(this.dataset.country);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
    document.querySelectorAll('.setup-country').forEach(btn => {
        btn.addEventListener('click', function() {
            selectSetupCountry(this.dataset.country);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤ (—Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è)
    const regionInput = document.querySelector('.form-region-input:not(.filter-region-input)');
    const cityInput = document.querySelector('.form-city-input:not(.filter-city-input)');
    
    if (regionInput) {
        regionInput.addEventListener('input', function() {
            handleRegionInput(this.value);
        });
        
        regionInput.addEventListener('keyup', function() {
            handleRegionInput(this.value);
        });
        
        regionInput.addEventListener('focus', function() {
            showAllRegions();
        });
        
        regionInput.addEventListener('click', function() {
            showAllRegions();
        });
    }
    
    if (cityInput) {
        cityInput.addEventListener('input', function() {
            handleCityInput(this.value);
        });
        
        cityInput.addEventListener('keyup', function() {
            handleCityInput(this.value);
        });
        
        cityInput.addEventListener('focus', function() {
            if (selectedRegion) {
                showAllCities();
            }
        });
        
        cityInput.addEventListener('click', function() {
            if (selectedRegion) {
                showAllCities();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    const filterRegionInput = document.querySelector('.filter-region-input');
    const filterCityInput = document.querySelector('.filter-city-input');
    
    if (filterRegionInput) {
        filterRegionInput.addEventListener('input', function() {
            handleFilterRegionInput(this.value);
        });
        
        filterRegionInput.addEventListener('keyup', function() {
            handleFilterRegionInput(this.value);
        });
        
        filterRegionInput.addEventListener('focus', function() {
            showAllFilterRegions();
        });
        
        filterRegionInput.addEventListener('click', function() {
            showAllFilterRegions();
        });
    }
    
    if (filterCityInput) {
        filterCityInput.addEventListener('input', function() {
            handleFilterCityInput(this.value);
        });
        
        filterCityInput.addEventListener('keyup', function() {
            handleFilterCityInput(this.value);
        });
        
        filterCityInput.addEventListener('focus', function() {
            if (filterSelectedRegion) {
                showAllFilterCities();
            }
        });
        
        filterCityInput.addEventListener('click', function() {
            if (filterSelectedRegion) {
                showAllFilterCities();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
    const setupRegionInput = document.querySelector('.setup-region-input');
    const setupCityInput = document.querySelector('.setup-city-input');
    
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏');
    console.log('setupRegionInput –Ω–∞–π–¥–µ–Ω:', !!setupRegionInput);
    console.log('setupCityInput –Ω–∞–π–¥–µ–Ω:', !!setupCityInput);
    
    if (setupRegionInput) {
        setupRegionInput.addEventListener('input', function() {
            console.log('input —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Ä–µ–≥–∏–æ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:', this.value);
            handleSetupRegionInput(this.value);
        });
        
        setupRegionInput.addEventListener('keyup', function() {
            handleSetupRegionInput(this.value);
        });
        
        setupRegionInput.addEventListener('focus', function() {
            // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            showAllSetupRegions();
        });
        
        setupRegionInput.addEventListener('click', function() {
            showAllSetupRegions();
        });
    }
    
    if (setupCityInput) {
        setupCityInput.addEventListener('input', function() {
            console.log('input —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:', this.value);
            handleSetupCityInput(this.value);
        });
        
        setupCityInput.addEventListener('keyup', function() {
            console.log('keyup —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:', this.value);
            handleSetupCityInput(this.value);
        });
        
        setupCityInput.addEventListener('focus', function() {
            console.log('focus —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ');
            if (setupSelectedRegion) {
                // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å hideAllSuggestions
                setTimeout(() => {
                    showAllSetupCities();
                }, 50);
            } else {
                console.log('–†–µ–≥–∏–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞');
            }
        });
        
        setupCityInput.addEventListener('click', function(e) {
            console.log('click —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ');
            e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
            if (setupSelectedRegion) {
                setTimeout(() => {
                    showAllSetupCities();
                }, 50);
            }
        });
        
        setupCityInput.addEventListener('mousedown', function(e) {
            console.log('mousedown —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ');
            e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞)
    const resetBtn = document.querySelector('.reset-form-location:not(.reset-filter-location)');
    if (resetBtn) {
        resetBtn.addEventListener('click', resetLocationSelection);
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏ (—Ñ–∏–ª—å—Ç—Ä)
    const resetFilterBtn = document.querySelector('.reset-filter-location');
    if (resetFilterBtn) {
        resetFilterBtn.addEventListener('click', resetFilterLocationSelection);
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
    const resetSetupBtn = document.querySelector('.reset-setup-location');
    if (resetSetupBtn) {
        resetSetupBtn.addEventListener('click', resetSetupLocation);
    }

    // –°–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    document.addEventListener('click', function(e) {
        // –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –ø–æ–ª—é –≤–≤–æ–¥–∞ –∏–ª–∏ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        if (!e.target.closest('.search-container') && !e.target.classList.contains('setup-region-input') && !e.target.classList.contains('setup-city-input')) {
            hideAllSuggestions();
        }
    });
}

// –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
function selectCountry(countryCode) {
    selectedCountry = countryCode;
    selectedRegion = null;
    selectedCity = null;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.form-country').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-country="${countryCode}"]`).classList.add('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const regionSection = document.querySelector('.form-region-selection');
    regionSection.style.display = 'block';
    setTimeout(() => {
        regionSection.style.opacity = '1';
    }, 50);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    document.querySelector('.form-city-selection').style.display = 'none';
    document.querySelector('.form-selected-location').style.display = 'none';
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
    document.querySelector('.form-region-input').value = '';
    document.querySelector('.form-city-input').value = '';
    
    console.log('–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞:', locationData[countryCode].name);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞
function handleRegionInput(value) {
    if (!selectedCountry) return;
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if (!value.trim()) {
        hideAllSuggestions();
        return;
    }
    
    const regions = Object.keys(locationData[selectedCountry].regions);
    const filtered = regions.filter(region => 
        region.toLowerCase().startsWith(value.toLowerCase())
    );
    
    showRegionSuggestions(filtered);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
function showAllRegions() {
    if (!selectedCountry) return;
    
    const regions = Object.keys(locationData[selectedCountry].regions);
    showRegionSuggestions(regions);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
function showRegionSuggestions(regions) {
    const suggestionsContainer = document.querySelector('.form-region-suggestions');
    
    if (regions.length === 0) {
        suggestionsContainer.style.display = 'none';
        suggestionsContainer.classList.remove('active');
        return;
    }
    
    suggestionsContainer.innerHTML = regions.map(region => `
        <div class="suggestion-item" onclick="selectRegion('${region}')">
            ${region}
        </div>
    `).join('');
    
    suggestionsContainer.style.display = 'block';
    suggestionsContainer.classList.add('active');
}

// –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
function selectRegion(regionName) {
    selectedRegion = regionName;
    selectedCity = null;
    
    document.querySelector('.form-region-input').value = regionName;
    hideAllSuggestions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const citySection = document.querySelector('.form-city-selection');
    citySection.style.display = 'block';
    setTimeout(() => {
        citySection.style.opacity = '1';
    }, 50);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≥–æ—Ä–æ–¥–∞
    document.querySelector('.form-city-input').value = '';
    document.querySelector('.form-city-input').focus();
    
    console.log('–í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω:', regionName);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
function handleCityInput(value) {
    if (!selectedCountry || !selectedRegion) return;
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if (!value.trim()) {
        hideAllSuggestions();
        return;
    }
    
    const cities = locationData[selectedCountry].regions[selectedRegion];
    const filtered = cities.filter(city => 
        city.toLowerCase().startsWith(value.toLowerCase())
    );
    
    showCitySuggestions(filtered);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞
function showAllCities() {
    if (!selectedCountry || !selectedRegion) return;
    
    const cities = locationData[selectedCountry].regions[selectedRegion];
    showCitySuggestions(cities);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
function showCitySuggestions(cities) {
    const suggestionsContainer = document.querySelector('.form-city-suggestions');
    
    if (cities.length === 0) {
        suggestionsContainer.style.display = 'none';
        suggestionsContainer.classList.remove('active');
        return;
    }
    
    suggestionsContainer.innerHTML = cities.map(city => `
        <div class="suggestion-item" onclick="selectCity('${city}')">
            ${city}
        </div>
    `).join('');
    
    suggestionsContainer.style.display = 'block';
    suggestionsContainer.classList.add('active');
}

// –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
function selectCity(cityName) {
    selectedCity = cityName;
    
    document.querySelector('.form-city-input').value = cityName;
    hideAllSuggestions();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    formData.country = selectedCountry;
    formData.region = selectedRegion;
    formData.city = cityName;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
    showSelectedLocation();
    
    console.log('–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥:', cityName);
    console.log('–ü–æ–ª–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è:', `${locationData[selectedCountry].name}, ${selectedRegion}, ${cityName}`);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
function showSelectedLocation() {
    const selectedLocationDiv = document.querySelector('.form-selected-location');
    const locationText = document.querySelector('.form-location-text');
    
    const fullLocation = `${locationData[selectedCountry].flag} ${selectedRegion}, ${selectedCity}`;
    locationText.textContent = fullLocation;
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞
    document.querySelector('.form-region-selection').style.display = 'none';
    document.querySelector('.form-city-selection').style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    selectedLocationDiv.style.display = 'block';
    setTimeout(() => {
        selectedLocationDiv.style.opacity = '1';
    }, 50);
}

// –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
function resetLocationSelection() {
    selectedCountry = null;
    selectedRegion = null;
    selectedCity = null;
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    delete formData.country;
    delete formData.region;
    delete formData.city;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω
    document.querySelectorAll('.form-country').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è)
    const regionInput = document.querySelector('.form-region-input');
    const cityInput = document.querySelector('.form-city-input');
    if (regionInput) regionInput.value = '';
    if (cityInput) cityInput.value = '';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –∫—Ä–æ–º–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è)
    const regionSection = document.querySelector('.form-region-selection');
    const citySection = document.querySelector('.form-city-selection');
    const selectedSection = document.querySelector('.form-selected-location');
    if (regionSection) regionSection.style.display = 'none';
    if (citySection) citySection.style.display = 'none';
    if (selectedSection) selectedSection.style.display = 'none';
    
    hideAllSuggestions();
    
    console.log('–í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω');
}

// –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function hideAllSuggestions() {
    document.querySelectorAll('.suggestions-list').forEach(list => {
        list.classList.remove('active');
        list.style.display = 'none';
        list.innerHTML = '';
    });
}

// –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏ –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
function hideOtherSuggestions(keepClass) {
    document.querySelectorAll('.suggestions-list').forEach(list => {
        if (!list.classList.contains(keepClass)) {
            list.classList.remove('active');
            list.style.display = 'none';
            list.innerHTML = '';
        }
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–∫–∞—Ü–∏–∏
    initLocationSelector();
    
    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    document.querySelectorAll('.gender-btn').forEach(btn => {
        btn.addEventListener('click', () => selectGender(btn.dataset.gender));
    });

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –ø–æ–∏—Å–∫–∞
    document.querySelectorAll('.target-btn').forEach(btn => {
        btn.addEventListener('click', () => selectTarget(btn.dataset.target));
    });

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
    document.querySelectorAll('.goal-btn').forEach(btn => {
        btn.addEventListener('click', () => selectGoal(btn.dataset.goal));
    });

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è
    document.querySelectorAll('.body-btn').forEach(btn => {
        btn.addEventListener('click', () => selectBody(btn.dataset.body));
    });

    // –§–∏–ª—å—Ç—Ä—ã –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    document.querySelectorAll('.city-btn.filter').forEach(btn => {
        btn.addEventListener('click', function() {
            handleCityFilter(this.dataset.city);
        });
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
function validateCurrentStep() {
    switch(currentStep) {
        case 1:
            // –ü–µ—Ä–≤—ã–π —à–∞–≥ - –≤—ã–±–æ—Ä –ø–æ–ª–∞
            return formData.gender;
        case 2:
            return formData.target;
        case 3:
            return formData.goal;
        case 4:
            const ageFrom = document.getElementById('ageFrom').value;
            const ageTo = document.getElementById('ageTo').value;
            if (ageFrom && ageTo) {
                formData.ageFrom = ageFrom;
                formData.ageTo = ageTo;
                return true;
            }
            return false;
        case 5:
            const myAge = document.getElementById('myAge').value;
            if (myAge) {
                formData.myAge = myAge;
                return true;
            }
            return false;
        case 6:
            return formData.body;
        case 7:
            const adText = document.getElementById('adText').value.trim();
            if (adText) {
                formData.text = adText;
                return true;
            }
            return false;
    }
    return false;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
function resetForm() {
    formData = {};
    currentStep = 1;
    
    // –°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞—Ü–∏–∏
    resetLocationSelection();
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤
    document.querySelectorAll('.selected').forEach(el => {
        el.classList.remove('selected');
    });
    
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
    document.getElementById('ageFrom').value = '';
    document.getElementById('ageTo').value = '';
    document.getElementById('myAge').value = '';
    document.getElementById('adText').value = '';
    
    showStep(1);
}

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–ò–õ–¨–¢–†–ê –í –ü–†–û–°–ú–û–¢–†–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ô ===

// –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function selectFilterCountry(countryCode) {
    filterSelectedCountry = countryCode;
    filterSelectedRegion = null;
    filterSelectedCity = null;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.filter-country').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-country="${countryCode}"].filter-country`).classList.add('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const regionSection = document.querySelector('.filter-region-selection');
    regionSection.style.display = 'block';
    setTimeout(() => {
        regionSection.style.opacity = '1';
    }, 50);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    document.querySelector('.filter-city-selection').style.display = 'none';
    document.querySelector('.filter-selected-location').style.display = 'none';
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
    document.querySelector('.filter-region-input').value = '';
    document.querySelector('.filter-city-input').value = '';
    
    console.log('–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:', locationData[countryCode].name);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function handleFilterRegionInput(value) {
    if (!filterSelectedCountry) return;
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if (!value.trim()) {
        hideAllSuggestions();
        return;
    }
    
    const regions = Object.keys(locationData[filterSelectedCountry].regions);
    const filtered = regions.filter(region => 
        region.toLowerCase().startsWith(value.toLowerCase())
    );
    
    showFilterRegionSuggestions(filtered);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function showAllFilterRegions() {
    if (!filterSelectedCountry) return;
    
    const regions = Object.keys(locationData[filterSelectedCountry].regions);
    showFilterRegionSuggestions(regions);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function showFilterRegionSuggestions(regions) {
    const suggestionsContainer = document.querySelector('.filter-region-suggestions');
    
    if (regions.length === 0) {
        suggestionsContainer.style.display = 'none';
        return;
    }
    
    suggestionsContainer.innerHTML = regions.map(region => `
        <div class="suggestion-item" onclick="selectFilterRegion('${region}')">
            ${region}
        </div>
    `).join('');
    
    suggestionsContainer.classList.add('active');
}

// –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function selectFilterRegion(regionName) {
    filterSelectedRegion = regionName;
    filterSelectedCity = null;
    
    document.querySelector('.filter-region-input').value = regionName;
    hideAllSuggestions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const citySection = document.querySelector('.filter-city-selection');
    citySection.style.display = 'block';
    setTimeout(() => {
        citySection.style.opacity = '1';
    }, 50);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≥–æ—Ä–æ–¥–∞
    document.querySelector('.filter-city-input').value = '';
    document.querySelector('.filter-city-input').focus();
    
    console.log('–í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:', regionName);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function handleFilterCityInput(value) {
    if (!filterSelectedCountry || !filterSelectedRegion) return;
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if (!value.trim()) {
        hideAllSuggestions();
        return;
    }
    
    const cities = locationData[filterSelectedCountry].regions[filterSelectedRegion];
    const filtered = cities.filter(city => 
        city.toLowerCase().startsWith(value.toLowerCase())
    );
    
    showFilterCitySuggestions(filtered);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function showAllFilterCities() {
    if (!filterSelectedCountry || !filterSelectedRegion) return;
    
    const cities = locationData[filterSelectedCountry].regions[filterSelectedRegion];
    showFilterCitySuggestions(cities);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function showFilterCitySuggestions(cities) {
    const suggestionsContainer = document.querySelector('.filter-city-suggestions');
    
    if (cities.length === 0) {
        suggestionsContainer.style.display = 'none';
        return;
    }
    
    suggestionsContainer.innerHTML = cities.map(city => `
        <div class="suggestion-item" onclick="selectFilterCity('${city}')">
            ${city}
        </div>
    `).join('');
    
    suggestionsContainer.classList.add('active');
}

// –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function selectFilterCity(cityName) {
    filterSelectedCity = cityName;
    
    document.querySelector('.filter-city-input').value = cityName;
    hideAllSuggestions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
    showFilterSelectedLocation();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
    loadAdsByLocation(filterSelectedCountry, filterSelectedRegion, cityName);
    
    console.log('–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:', cityName);
    console.log('–ü–æ–ª–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞:', `${locationData[filterSelectedCountry].name}, ${filterSelectedRegion}, ${cityName}`);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function showFilterSelectedLocation() {
    const selectedLocationDiv = document.querySelector('.filter-selected-location');
    const locationText = document.querySelector('.filter-location-text');
    
    const fullLocation = `${locationData[filterSelectedCountry].flag} ${filterSelectedRegion}, ${filterSelectedCity}`;
    locationText.textContent = fullLocation;
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞
    document.querySelector('.filter-region-selection').style.display = 'none';
    document.querySelector('.filter-city-selection').style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    selectedLocationDiv.style.display = 'block';
    setTimeout(() => {
        selectedLocationDiv.style.opacity = '1';
    }, 50);
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ UI —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function setFilterLocationUI() {
    if (!userLocation) {
        console.log('setFilterLocationUI: –ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        return;
    }
    
    console.log('setFilterLocationUI: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏', userLocation);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Å—Ç—Ä–∞–Ω—ã
    const countryButtons = document.querySelectorAll('.filter-country');
    console.log('–ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:', countryButtons.length);
    
    countryButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.country === userLocation.country) {
            btn.classList.add('active');
            console.log('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ç—Ä–∞–Ω—ã:', btn.dataset.country);
        }
    });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    const regionInput = document.querySelector('.filter-region-input');
    const cityInput = document.querySelector('.filter-city-input');
    
    console.log('regionInput –Ω–∞–π–¥–µ–Ω:', !!regionInput);
    console.log('cityInput –Ω–∞–π–¥–µ–Ω:', !!cityInput);
    
    if (regionInput) regionInput.value = userLocation.region;
    if (cityInput) cityInput.value = userLocation.city;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –∫–∞–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    const regionSection = document.querySelector('.filter-region-selection');
    const citySection = document.querySelector('.filter-city-selection');
    const selectedLocationDiv = document.querySelector('.filter-selected-location');
    const locationText = document.querySelector('.filter-location-text');
    
    console.log('–°–µ–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã:', {
        regionSection: !!regionSection,
        citySection: !!citySection,
        selectedLocationDiv: !!selectedLocationDiv,
        locationText: !!locationText
    });
    
    if (regionSection) {
        regionSection.style.display = 'block';
        regionSection.style.opacity = '1';
    }
    
    if (citySection) {
        citySection.style.display = 'block';
        citySection.style.opacity = '1';
    }
    
    if (selectedLocationDiv && locationText) {
        const fullLocation = `${locationData[userLocation.country].flag} ${userLocation.region}, ${userLocation.city}`;
        locationText.textContent = fullLocation;
        selectedLocationDiv.style.display = 'block';
        selectedLocationDiv.style.opacity = '1';
        console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –ª–æ–∫–∞—Ü–∏–∏:', fullLocation);
    }
    
    console.log('UI —Ñ–∏–ª—å—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userLocation);
}

// –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function resetFilterLocationSelection() {
    filterSelectedCountry = null;
    filterSelectedRegion = null;
    filterSelectedCity = null;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω
    document.querySelectorAll('.filter-country').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    document.querySelector('.filter-region-input').value = '';
    document.querySelector('.filter-city-input').value = '';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –∫—Ä–æ–º–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
    document.querySelector('.filter-region-selection').style.display = 'none';
    document.querySelector('.filter-city-selection').style.display = 'none';
    document.querySelector('.filter-selected-location').style.display = 'none';
    
    hideAllSuggestions();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    loadAds();
    
    console.log('–í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–±—Ä–æ—à–µ–Ω');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ª–æ–∫–∞—Ü–∏–∏
function loadAdsByLocation(country, region, city) {
    try {
        console.log('–ó–∞–ø—Ä–æ—Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ª–æ–∫–∞—Ü–∏–∏:', {country, region, city});
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        const filters = {};
        if (country) filters.country = country;
        if (city) filters.city = city;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à API
        loadAds(filters);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ª–æ–∫–∞—Ü–∏–∏:', error);
    }
}

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ö–ê–¶–ò–ò ===

// –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
function selectSetupCountry(countryCode) {
    setupSelectedCountry = countryCode;
    setupSelectedRegion = null;
    setupSelectedCity = null;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.setup-country').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-country="${countryCode}"].setup-country`).classList.add('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const regionSection = document.querySelector('.setup-region-selection');
    regionSection.style.display = 'block';
    setTimeout(() => {
        regionSection.style.opacity = '1';
    }, 50);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    document.querySelector('.setup-city-selection').style.display = 'none';
    document.querySelector('.setup-selected-location').style.display = 'none';
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
    document.querySelector('.setup-region-input').value = '';
    document.querySelector('.setup-city-input').value = '';
    
    console.log('–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', locationData[countryCode].name);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
function handleSetupRegionInput(value) {
    if (!setupSelectedCountry) return;
    
    if (!value.trim()) {
        hideAllSuggestions();
        return;
    }
    
    const regions = Object.keys(locationData[setupSelectedCountry].regions);
    const filtered = regions.filter(region => 
        region.toLowerCase().startsWith(value.toLowerCase())
    );
    
    showSetupRegionSuggestions(filtered);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
function showAllSetupRegions() {
    if (!setupSelectedCountry) return;
    
    const regions = Object.keys(locationData[setupSelectedCountry].regions);
    showSetupRegionSuggestions(regions);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
function showSetupRegionSuggestions(regions) {
    const suggestionsContainer = document.querySelector('.setup-region-suggestions');
    
    if (regions.length === 0) {
        suggestionsContainer.style.display = 'none';
        suggestionsContainer.classList.remove('active');
        return;
    }
    
    suggestionsContainer.innerHTML = regions.map(region => `
        <div class="suggestion-item" onclick="selectSetupRegion('${region}')">
            ${region}
        </div>
    `).join('');
    
    suggestionsContainer.style.display = 'block';
    suggestionsContainer.classList.add('active');
}

// –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
function selectSetupRegion(regionName) {
    setupSelectedRegion = regionName;
    setupSelectedCity = null;
    
    document.querySelector('.setup-region-input').value = regionName;
    hideAllSuggestions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const citySection = document.querySelector('.setup-city-selection');
    citySection.style.display = 'block';
    setTimeout(() => {
        citySection.style.opacity = '1';
    }, 50);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≥–æ—Ä–æ–¥–∞
    const cityInput = document.querySelector('.setup-city-input');
    cityInput.value = '';
    
    console.log('–í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:', regionName);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:', locationData[setupSelectedCountry].regions[regionName]);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    setTimeout(() => {
        showAllSetupCities();
    }, 100);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
function handleSetupCityInput(value) {
    console.log('handleSetupCityInput –≤—ã–∑–≤–∞–Ω–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º:', value);
    console.log('setupSelectedCountry:', setupSelectedCountry);
    console.log('setupSelectedRegion:', setupSelectedRegion);
    
    if (!setupSelectedCountry || !setupSelectedRegion) {
        console.log('–°—Ç—Ä–∞–Ω–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –≤—ã—Ö–æ–¥–∏–º');
        return;
    }
    
    if (!value.trim()) {
        console.log('–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
        hideAllSuggestions();
        return;
    }
    
    const cities = locationData[setupSelectedCountry].regions[setupSelectedRegion];
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:', cities);
    
    const filtered = cities.filter(city => 
        city.toLowerCase().startsWith(value.toLowerCase())
    );
    console.log('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:', filtered);
    
    showSetupCitySuggestions(filtered);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
function showAllSetupCities() {
    console.log('showAllSetupCities –≤—ã–∑–≤–∞–Ω–∞');
    console.log('setupSelectedCountry:', setupSelectedCountry);
    console.log('setupSelectedRegion:', setupSelectedRegion);
    
    if (!setupSelectedCountry || !setupSelectedRegion) {
        console.log('–°—Ç—Ä–∞–Ω–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞');
        return;
    }
    
    const cities = locationData[setupSelectedCountry].regions[setupSelectedRegion];
    console.log('–ì–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞', setupSelectedRegion, ':', cities);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Å–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ
    hideOtherSuggestions('setup-city-suggestions');
    showSetupCitySuggestions(cities);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
function showSetupCitySuggestions(cities) {
    const suggestionsContainer = document.querySelector('.setup-city-suggestions');
    
    console.log('showSetupCitySuggestions –≤—ã–∑–≤–∞–Ω–∞ —Å –≥–æ—Ä–æ–¥–∞–º–∏:', cities);
    console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω:', suggestionsContainer);
    
    if (!suggestionsContainer) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    if (cities.length === 0) {
        suggestionsContainer.style.display = 'none';
        suggestionsContainer.classList.remove('active');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    suggestionsContainer.innerHTML = cities.map(city => `
        <div class="suggestion-item" onclick="selectSetupCity('${city}')">
            ${city}
        </div>
    `).join('');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    suggestionsContainer.style.display = 'block';
    suggestionsContainer.classList.add('active');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º
    setTimeout(() => {
        const computedStyle = window.getComputedStyle(suggestionsContainer);
        console.log('–°—Ç–∏–ª—å display –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞:', computedStyle.display);
        console.log('–ö–ª–∞—Å—Å active –µ—Å—Ç—å:', suggestionsContainer.classList.contains('active'));
    }, 10);
    console.log('–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω, HTML:', suggestionsContainer.innerHTML);
}

// –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
function selectSetupCity(cityName) {
    setupSelectedCity = cityName;
    
    document.querySelector('.setup-city-input').value = cityName;
    hideAllSuggestions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
    showSetupSelectedLocation();
    
    console.log('–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:', cityName);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
function showSetupSelectedLocation() {
    const selectedLocationDiv = document.querySelector('.setup-selected-location');
    const locationText = document.querySelector('.setup-location-text');
    
    const fullLocation = `${locationData[setupSelectedCountry].flag} ${setupSelectedRegion}, ${setupSelectedCity}`;
    locationText.textContent = fullLocation;
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞
    document.querySelector('.setup-region-selection').style.display = 'none';
    document.querySelector('.setup-city-selection').style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    selectedLocationDiv.style.display = 'block';
    setTimeout(() => {
        selectedLocationDiv.style.opacity = '1';
    }, 50);
}

// –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
function resetSetupLocation() {
    setupSelectedCountry = null;
    setupSelectedRegion = null;
    setupSelectedCity = null;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω
    document.querySelectorAll('.setup-country').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    document.querySelector('.setup-region-input').value = '';
    document.querySelector('.setup-city-input').value = '';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –∫—Ä–æ–º–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
    document.querySelector('.setup-region-selection').style.display = 'none';
    document.querySelector('.setup-city-selection').style.display = 'none';
    document.querySelector('.setup-selected-location').style.display = 'none';
    
    hideAllSuggestions();
    
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω–∞');
}

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.debugApp = {
    formData: () => console.log(formData),
    currentStep: () => console.log(currentStep),
    tg: () => console.log(tg),
    locationData: () => console.log(locationData),
    selectedLocation: () => console.log({selectedCountry, selectedRegion, selectedCity}),
    filterLocation: () => console.log({filterSelectedCountry, filterSelectedRegion, filterSelectedCity}),
    setupLocation: () => console.log({setupSelectedCountry, setupSelectedRegion, setupSelectedCity}),
    userLocation: () => console.log(userLocation),
    checkStorage: () => {
        const localData = localStorage.getItem('userLocation');
        console.log('localStorage userLocation:', localData);
        if (tg.CloudStorage) {
            tg.CloudStorage.getItem('userLocation', (err, value) => {
                console.log('CloudStorage userLocation:', {err, value});
            });
        }
    },
    clearUserLocation: () => {
        if (tg.CloudStorage) {
            tg.CloudStorage.removeItem('userLocation');
        }
        localStorage.removeItem('userLocation');
        userLocation = null;
        showAutoLocationDetection();
    },
    forceAutoDetection: () => {
        showAutoLocationDetection();
    }
};

// =============== –ì–ê–ú–ë–£–†–ì–ï–† –ú–ï–ù–Æ ===============

function toggleHamburgerMenu() {
    const overlay = document.getElementById('hamburgerMenuOverlay');
    overlay.classList.toggle('active');
}

function closeHamburgerMenu() {
    const overlay = document.getElementById('hamburgerMenuOverlay');
    overlay.classList.remove('active');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ overlay
document.addEventListener('DOMContentLoaded', () => {
    const overlay = document.getElementById('hamburgerMenuOverlay');
    
    overlay.addEventListener('click', (e) => {
        if (e.target === overlay) {
            closeHamburgerMenu();
        }
    });
});

// –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é
function goToHome() {
    closeHamburgerMenu();
    showMainMenu();
    updateActiveMenuItem('home');
}

function showContacts() {
    closeHamburgerMenu();
    showScreen('contacts');
    updateActiveMenuItem('contacts');
}

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º—ã
let emailFormHandlersInitialized = false;

function showEmailForm() {
    showScreen('emailForm');
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    document.getElementById('senderEmail').value = '';
    document.getElementById('emailSubject').value = '–û–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ anonimka.online';
    document.getElementById('emailMessage').value = '';
    document.getElementById('emailStatus').style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    showEmailStatus('loading', 'üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ. –ü–∏—Å—å–º–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä anonimka.online');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if (!emailFormHandlersInitialized) {
        setTimeout(() => {
            setupEmailFormHandlers();
        }, 100);
    }
}

// –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
function setupEmailFormHandlers() {
    const contactForm = document.getElementById('contactForm');
    
    console.log('setupEmailFormHandlers –≤—ã–∑–≤–∞–Ω–∞');
    console.log('contactForm –Ω–∞–π–¥–µ–Ω–∞:', !!contactForm);
    
    if (contactForm) {
        contactForm.addEventListener('submit', handleEmailSubmit);
        console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ submit –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ñ–æ—Ä–º–µ');
        emailFormHandlersInitialized = true;
    }
}

function showRules() {
    closeHamburgerMenu();
    showScreen('rules');
    updateActiveMenuItem('rules');
}

function showPrivacy() {
    closeHamburgerMenu();
    showScreen('privacy');
    updateActiveMenuItem('privacy');
}

function showAbout() {
    closeHamburgerMenu();
    showScreen('about');
    updateActiveMenuItem('about');
}

function updateActiveMenuItem(activeId) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    document.querySelectorAll('.hamburger-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω—É–∂–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
    const activeItem = document.querySelector(`.hamburger-item[onclick*="${activeId}"], .hamburger-item[onclick="goToHome()"]`);
    if (activeItem) {
        activeItem.classList.add('active');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function openEmailComposer() {
    console.log('openEmailComposer –≤—ã–∑–≤–∞–Ω–∞');
    const recipient = 'aleksey@vorobey444.ru';
    const subject = encodeURIComponent('–û–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ anonimka.online');
    const body = encodeURIComponent(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–ü–∏—à—É –≤–∞–º —á–µ—Ä–µ–∑ –∞–Ω–æ–Ω–∏–º–Ω—É—é –¥–æ—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π anonimka.online\n\n[–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å]\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n[–í–∞—à–µ –∏–º—è]`);
    const mailtoLink = `mailto:${recipient}?subject=${subject}&body=${body}`;
    window.open(mailtoLink, '_blank');
}

function openTelegramChat() {
    console.log('openTelegramChat –≤—ã–∑–≤–∞–Ω–∞');
    
    const telegramUrl = 'https://t.me/Vorobey_444';
    
    // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ Telegram Web App API
    if (tg && tg.openTelegramLink) {
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º tg.openTelegramLink');
        tg.openTelegramLink(telegramUrl);
    } else if (tg && tg.openLink) {
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º tg.openLink');
        tg.openLink(telegramUrl);
    } else {
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º window.open –∫–∞–∫ fallback');
        // Fallback - –æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
        window.open(telegramUrl, '_blank');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function setupContactsEventListeners() {
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
    
    // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º—ã –∑–¥–µ—Å—å - –æ–Ω–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ setupEmailFormHandlers
    // –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ showEmailForm()
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Telegram –∫–æ–Ω—Ç–∞–∫—Ç–∞
    const telegramContact = document.querySelector('.contact-item[onclick*="openTelegramChat"]');
    
    if (telegramContact) {
        console.log('–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç telegram –∫–æ–Ω—Ç–∞–∫—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
        telegramContact.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('–ö–ª–∏–∫ –ø–æ telegram –∫–æ–Ω—Ç–∞–∫—Ç—É');
            openTelegramChat();
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ - –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
window.handleEmailSubmit = async function(event) {
    if (event) event.preventDefault();
    console.log('üöÄ handleEmailSubmit –≤—ã–∑–≤–∞–Ω–∞ - –†–ê–ë–û–¢–ê–ï–¢!');
    
    const senderEmail = document.getElementById('senderEmail');
    const subject = document.getElementById('emailSubject');
    const message = document.getElementById('emailMessage');
    const sendBtn = document.getElementById('sendEmailBtn');
    
    console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã:', {
        senderEmail: !!senderEmail,
        subject: !!subject, 
        message: !!message,
        sendBtn: !!sendBtn
    });
    
    if (!senderEmail || !subject || !message) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã!');
        alert('–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    const emailValue = senderEmail.value.trim();
    const subjectValue = subject.value.trim();
    const messageValue = message.value.trim();
    
    console.log('–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π:', { emailValue, subjectValue, messageValue });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!emailValue || !messageValue) {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: –ø—É—Å—Ç—ã–µ –ø–æ–ª—è');
        showEmailStatus('error', '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }
    
    if (messageValue.length < 3) {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        showEmailStatus('error', '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
        return;
    }
    
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –∑–∞—Ä–∞–Ω–µ–µ (–Ω—É–∂–Ω–æ –∏ –¥–ª—è fallback –≤ catch)
    const emailData = {
        senderEmail: (senderEmail?.value || '').trim(),
        subject: (subject?.value || '–û–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ anonimka.online').trim() || '–û–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ anonimka.online',
        message: (message?.value || '').trim()
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    showEmailStatus('loading', 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ...');
    if (sendBtn) sendBtn.disabled = true;
    
    try {
        // –û–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π (–¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏)
        emailData.senderEmail = emailValue;
        emailData.subject = subjectValue || emailData.subject;
        emailData.message = messageValue;

        console.log('üìß –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
        const result = await sendEmailToBackend(emailData);
        
        // –ï—Å–ª–∏ –±—ç–∫–µ–Ω–¥ —Å—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ
        if (result && result.success) {
            console.log('‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥!');
            showEmailStatus('success', '‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('senderEmail').value = '';
            document.getElementById('emailSubject').value = '–û–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ anonimka.online';
            document.getElementById('emailMessage').value = '';
            
            return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥—è –∫ mailto
        }
        
        // –ï—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, fallback –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è localhost
        // (–æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ catch –±–ª–æ–∫–µ)
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥:', error);
        
        // Fallback: –æ—Ç–∫—Ä—ã–≤–∞–µ–º mailto
        console.log('üìß –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ mailto fallback...');
        
        const subject_encoded = encodeURIComponent(`[anonimka.online] ${emailData.subject}`);
        const body_encoded = encodeURIComponent(`–û—Ç: ${emailData.senderEmail}
–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ anonimka.online

${emailData.message}

---
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å: ${emailData.senderEmail}
–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}`);

        const mailtoLink = `mailto:aleksey@vorobey444.ru?subject=${subject_encoded}&body=${body_encoded}`;
        
        console.log('üìß Mailto —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', mailtoLink);
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        window.open(mailtoLink, '_blank');
        
        showEmailStatus('success', '‚úÖ –ü–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç! –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å, –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∏–∂–µ:');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        setTimeout(() => {
            showManualEmailOption(emailData);
        }, 2000);
    } finally {
        if (sendBtn) sendBtn.disabled = false;
    }
};
// –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏—é —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
function showManualEmailOption(emailData) {
    const statusDiv = document.getElementById('emailStatus');
    statusDiv.className = 'email-status error';
    statusDiv.innerHTML = `
        üìã <strong>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:</strong>
        <br><br>
        <strong>–ù–∞:</strong> aleksey@vorobey444.ru<br>
        <strong>–û—Ç:</strong> ${emailData.senderEmail}<br>
        <strong>–¢–µ–º–∞:</strong> ${emailData.subject}<br>
        <strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong><br>
        ${emailData.message.replace(/\n/g, '<br>')}
        <br><br>
        <button class="neon-button secondary" onclick="copyEmailData('${emailData.senderEmail}', '${emailData.subject.replace(/'/g, "\\'")}', '${emailData.message.replace(/'/g, "\\'")}')">
            üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        </button>
        <button class="neon-button primary" onclick="openManualMailto('${emailData.senderEmail}', '${emailData.subject.replace(/'/g, "\\'")}', '${emailData.message.replace(/'/g, "\\'")}')">
            üìß –û—Ç–∫—Ä—ã—Ç—å –ø–æ—á—Ç—É
        </button>
    `;
}

// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
function copyEmailData(senderEmail, subject, message) {
    const emailText = `–ù–∞: aleksey@vorobey444.ru
–û—Ç: ${senderEmail}
–¢–µ–º–∞: ${subject}

${message}`;

    if (navigator.clipboard) {
        navigator.clipboard.writeText(emailText).then(() => {
            showEmailStatus('success', '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        });
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = emailText;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showEmailStatus('success', '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }
}

// –û—Ç–∫—Ä—ã—Ç—å –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é
function openManualMailto(senderEmail, subject, message) {
    const mailtoData = {
        senderEmail,
        subject,
        message
    };
    
    sendEmailViaMailto(mailtoData).then(result => {
        if (result.success) {
            showEmailStatus('success', result.message);
        } else {
            showEmailStatus('error', result.error);
        }
    });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ onclick
window.copyEmailData = copyEmailData;
window.openManualMailto = openManualMailto;

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
function showEmailStatus(type, message) {
    const statusDiv = document.getElementById('emailStatus');
    statusDiv.className = `email-status ${type}`;
    
    if (type === 'loading') {
        statusDiv.innerHTML = `<div class="loading-spinner"></div>${message}`;
    } else {
        statusDiv.innerHTML = message;
    }
    
    statusDiv.style.display = 'block';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–∫—Ä–æ–º–µ –æ—à–∏–±–æ–∫)
    if (type === 'success') {
        setTimeout(() => {
            statusDiv.style.display = 'none';
        }, 5000);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥
async function sendEmailToBackend(emailData) {
    try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –±—ç–∫–µ–Ω–¥–∞
        const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
        console.log('–¢–µ–∫—É—â–∏–π —Ö–æ—Å—Ç:', window.location.hostname);
        console.log('–≠—Ç–æ localhost?', isLocalhost);
        
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º Yandex Email —Å–µ—Ä–≤–µ—Ä
        if (isLocalhost) {
            const backendUrl = 'http://localhost:5000/send-email';
            console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Yandex SMTP —Å–µ—Ä–≤–µ—Ä:', backendUrl);
            console.log('üì® –î–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞:', emailData);
            
            const response = await fetch(backendUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(emailData)
            });
            
            if (!response.ok) {
                console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, response.statusText);
                const errorText = await response.text();
                console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorText);
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
            
            const result = await response.json();
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Yandex:', result);
            return result;
        }
        
        // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–∫ –≤ whish.online
        console.log('üìß –ü—Ä–æ–¥–∞–∫—à–µ–Ω: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤ whish.online - –ø—Ä–æ—Å—Ç–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é email
        if (typeof window.sendEmailWhishStyle === 'undefined') {
            console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º Email Service...');
            await loadEmailService();
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
        return window.sendEmailWhishStyle(emailData);
    } catch (error) {
        console.log('–ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –±—ç–∫–µ–Ω–¥:', error);
        
        // –ï—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram Bot API
        return await sendEmailViaTelegram(emailData);
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ –∏–ª–∏ mailto
async function sendEmailViaTelegram(emailData) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Telegram Web App
        if (tg && tg.sendData) {
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram Web App');
            tg.sendData(JSON.stringify({
                action: 'sendEmail',
                data: {
                    senderEmail: emailData.senderEmail,
                    subject: emailData.subject,
                    message: emailData.message
                }
            }));
            
            return {
                success: true,
                message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞'
            };
        } else {
            console.log('Telegram Web App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mailto');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π mailto –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            return sendEmailViaMailto(emailData);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ Telegram –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        return sendEmailViaMailto(emailData);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π mailto
async function sendEmailViaMailto(emailData) {
    try {
        const subject = encodeURIComponent(`[anonimka.online] ${emailData.subject}`);
        const body = encodeURIComponent(`–û—Ç: ${emailData.senderEmail}
–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ anonimka.online

${emailData.message}

---
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å: ${emailData.senderEmail}
–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}`);

        const mailtoLink = `mailto:aleksey@vorobey444.ru?subject=${subject}&body=${body}`;
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        window.open(mailtoLink, '_blank');
        
        return {
            success: true,
            message: '–û—Ç–∫—Ä—ã—Ç –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é.'
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ mailto:', error);
        return {
            success: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∏—Å—å–º–æ –≤—Ä—É—á–Ω—É—é –Ω–∞ aleksey@vorobey444.ru'
        };
    }
}
