'use client'

import { useState } from 'react'

interface EmailTestProps {
  className?: string
}

export default function EmailTest({ className = '' }: EmailTestProps) {
  const [testResult, setTestResult] = useState<string>('')
  const [isLoading, setIsLoading] = useState(false)

  const testEmailAPI = async () => {
    setIsLoading(true)
    setTestResult('')

    const testData = {
      senderEmail: 'test@example.com',
      subject: '–¢–µ—Å—Ç API anonimka.online',
      message: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ ${new Date().toLocaleString('ru-RU')}\n\n–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç email API —Å–∏—Å—Ç–µ–º—ã Anonimka.Online —á–µ—Ä–µ–∑ Vercel + Nodemailer.\n\n–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á—Ç–æ –∏ whish.online.`
    }

    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API /api/send-email...')
      
      const response = await fetch('/api/send-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testData),
      })

      const result = await response.json()
      
      if (result.success) {
        setTestResult(`‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!\n\nMessageId: ${result.messageId}\n–û—Ç–≤–µ—Ç: ${result.message}`)
        console.log('‚úÖ Email API —Ä–∞–±–æ—Ç–∞–µ—Ç:', result)
      } else {
        setTestResult(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:\n\n${result.error}\n\n–î–µ—Ç–∞–ª–∏: ${JSON.stringify(result.details, null, 2)}`)
        console.error('‚ùå –û—à–∏–±–∫–∞ API:', result)
      }
    } catch (error) {
      setTestResult(`‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:\n\n${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className={`neon-card ${className}`}>
      <h3 className="text-xl font-bold mb-4 neon-text">
        üß™ –¢–µ—Å—Ç Email API
      </h3>
      
      <p className="text-sm opacity-80 mb-6">
        –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É email API —Å–∏—Å—Ç–µ–º—ã. –ü–∏—Å—å–º–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ vorobey469@yandex.ru —á–µ—Ä–µ–∑ Yandex SMTP.
      </p>

      <button
        onClick={testEmailAPI}
        disabled={isLoading}
        className="neon-button mb-6 disabled:opacity-50"
      >
        {isLoading ? (
          <>
            <span className="loading mr-2"></span>
            –¢–µ—Å—Ç–∏—Ä—É–µ–º API...
          </>
        ) : (
          'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç'
        )}
      </button>

      {testResult && (
        <div className={`p-4 rounded-lg border font-mono text-sm ${
          testResult.includes('‚úÖ') 
            ? 'border-green-500 bg-green-500/10 text-success' 
            : 'border-red-500 bg-red-500/10 text-error'
        }`}>
          <pre className="whitespace-pre-wrap">{testResult}</pre>
        </div>
      )}

      <div className="mt-6 text-xs opacity-60">
        <p><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong></p>
        <ul className="mt-2 space-y-1">
          <li>‚Ä¢ API: /api/send-email (Vercel Serverless Function)</li>
          <li>‚Ä¢ SMTP: smtp.yandex.ru:587</li>
          <li>‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: wish.online@yandex.kz</li>
          <li>‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: vorobey469@yandex.ru</li>
          <li>‚Ä¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: nodemailer</li>
        </ul>
      </div>
    </div>
  )
}