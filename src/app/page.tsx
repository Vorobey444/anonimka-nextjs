'use client'

import { useState, useEffect } from 'react'
import EmailTest from '@/components/EmailTest'

// –¢–∏–ø—ã –¥–ª—è Telegram Web App
declare global {
  interface Window {
    Telegram?: {
      WebApp: {
        ready: () => void
        expand: () => void
        close: () => void
        MainButton: {
          text: string
          color: string
          textColor: string
          isVisible: boolean
          isActive: boolean
          setText: (text: string) => void
          onClick: (callback: () => void) => void
          show: () => void
          hide: () => void
        }
        initData: string
        initDataUnsafe: {
          user?: {
            id: number
            first_name?: string
            last_name?: string
            username?: string
          }
        }
        themeParams: {
          bg_color?: string
          text_color?: string
          hint_color?: string
          link_color?: string
          button_color?: string
          button_text_color?: string
        }
      }
    }
  }
}

interface ContactFormData {
  senderEmail: string
  subject: string
  message: string
}

export default function Home() {
  const [formData, setFormData] = useState<ContactFormData>({
    senderEmail: '',
    subject: '',
    message: ''
  })
  const [isLoading, setIsLoading] = useState(false)
  const [status, setStatus] = useState<'idle' | 'success' | 'error'>('idle')
  const [statusMessage, setStatusMessage] = useState('')

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
  useEffect(() => {
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp
      tg.ready()
      tg.expand()
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
      document.documentElement.style.setProperty('--tg-bg-color', tg.themeParams.bg_color || '#0a0a0f')
      document.documentElement.style.setProperty('--tg-text-color', tg.themeParams.text_color || '#00d4ff')
      
      console.log('Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', tg.initDataUnsafe)
    }
  }, [])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev: ContactFormData) => ({
      ...prev,
      [name]: value
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.senderEmail || !formData.message) {
      setStatus('error')
      setStatusMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
      return
    }

    setIsLoading(true)
    setStatus('idle')
    setStatusMessage('')

    try {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Vercel API:', formData)
      
      const response = await fetch('/api/send-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      const result = await response.json()
      console.log('–û—Ç–≤–µ—Ç –æ—Ç API:', result)

      if (result.success) {
        setStatus('success')
        setStatusMessage(result.message || '–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
        setFormData({
          senderEmail: '',
          subject: '',
          message: ''
        })
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error)
      setStatus('error')
      setStatusMessage(error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <main className="min-h-screen p-4 md:p-8">
      <div className="max-w-2xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-6xl font-bold neon-text mb-4">
            ANONIMKA.ONLINE
          </h1>
          <p className="text-lg md:text-xl opacity-80">
            –ê–Ω–æ–Ω–∏–º–Ω–∞—è –¥–æ—Å–∫–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤
          </p>
        </div>

        {/* –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ */}
        <div className="neon-card">
          <h2 className="text-2xl font-bold mb-6 neon-text">
            üíå –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
          </h2>
          
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Email */}
            <div>
              <label htmlFor="senderEmail" className="block text-sm font-medium mb-2">
                –í–∞—à Email *
              </label>
              <input
                type="email"
                id="senderEmail"
                name="senderEmail"
                value={formData.senderEmail}
                onChange={handleInputChange}
                placeholder="your-email@example.com"
                className="neon-input"
                required
              />
            </div>

            {/* –¢–µ–º–∞ */}
            <div>
              <label htmlFor="subject" className="block text-sm font-medium mb-2">
                –¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
              </label>
              <input
                type="text"
                id="subject"
                name="subject"
                value={formData.subject}
                onChange={handleInputChange}
                placeholder="–¢–µ–º–∞ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
                className="neon-input"
              />
            </div>

            {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
            <div>
              <label htmlFor="message" className="block text-sm font-medium mb-2">
                –°–æ–æ–±—â–µ–Ω–∏–µ *
              </label>
              <textarea
                id="message"
                name="message"
                value={formData.message}
                onChange={handleInputChange}
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ..."
                rows={6}
                className="neon-input resize-vertical"
                required
              />
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            <button
              type="submit"
              disabled={isLoading}
              className="neon-button w-full disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? (
                <>
                  <span className="loading mr-2"></span>
                  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
                </>
              ) : (
                'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
              )}
            </button>
          </form>

          {/* –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
          {status !== 'idle' && (
            <div className={`mt-6 p-4 rounded-lg border ${
              status === 'success' 
                ? 'border-green-500 bg-green-500/10 text-success' 
                : 'border-red-500 bg-red-500/10 text-error'
            }`}>
              <p className="font-medium">
                {status === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ!' : '‚ùå –û—à–∏–±–∫–∞'}
              </p>
              <p className="text-sm mt-1">{statusMessage}</p>
            </div>
          )}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ */}
        <div className="neon-card mt-8">
          <h3 className="text-xl font-bold mb-4 neon-text">
            üìã –û –ø—Ä–æ–µ–∫—Ç–µ Anonimka.Online
          </h3>
          <div className="space-y-3 text-sm opacity-80">
            <p>‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º</p>
            <p>‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—â–µ–Ω–∏—è</p>
            <p>‚Ä¢ Telegram Mini App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</p>
            <p>‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞</p>
          </div>
        </div>

        {/* Email API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
        <EmailTest className="mt-8" />

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã */}
        <div className="text-center mt-8">
          <a 
            href="/test" 
            className="neon-button"
            style={{ borderColor: '#39ff14', color: '#39ff14' }}
          >
            üß™ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
          </a>
        </div>

        {/* –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ */}
        <div className="text-center mt-8 text-xs opacity-60">
          <p>Powered by Next.js + Vercel + Nodemailer</p>
          <p>Email —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è whish.online</p>
        </div>
      </div>
    </main>
  )
}